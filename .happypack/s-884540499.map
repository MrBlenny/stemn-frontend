{"version":3,"sources":["app\\renderer\\main\\modules\\Comments\\Comment\\CommentNew.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AAGA;;IAAY,e;;AAIZ;;;;AAGA;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAnBA;;;AAIA;;;AAGA;;;AAIA;;;AAIA;;;AAOA;AACA;AACA;;AAEO,IAAM,6DAAY,gBAAM,WAAN,CAAkB;AAAA;AACzC,kBADyC,8BACtB;AACjB,SAAK,KAAL,CAAW,eAAX,CAA2B,UAA3B,CAAsC;AACpC,eAAS;AACP,cAAM,KAAK,KAAL,CAAW,MADV;AAEP,cAAM,KAAK,KAAL,CAAW,UAAX,CAAsB;AAFrB;AAD2B,KAAtC;AAMD,GARwC;AASzC,QATyC,oBAShC;AAAA,iBACoD,KAAK,KADzD;AAAA,QACC,IADD,UACC,IADD;AAAA,QACO,UADP,UACO,UADP;AAAA,QACmB,WADnB,UACmB,WADnB;AAAA,QACgC,eADhC,UACgC,eADhC;;;AAGP,WACE;AAAA;AAAA,QAAK,WAAW,kBAAQ,OAAR,GAAkB,aAAlC;AACE;AAAA;AAAA,UAAK,WAAW,kBAAQ,aAAxB;AACE,8DAAY,SAAS,KAAK,IAAL,CAAU,OAA/B,EAAwC,MAAK,IAA7C,EAAkD,OAAM,QAAxD;AADF,OADF;AAIE;AAAA;AAAA,UAAK,WAAW,kBAAQ,WAAR,GAAsB,OAAtC;AACE;AAAA;AAAA,YAAK,WAAW,kBAAQ,aAAxB;AAAA;AAAA,SADF;AAIE;AAAA;AAAA,YAAK,WAAW,kBAAQ,cAAxB;AACE,4DAAQ,OAAU,WAAV,UAAR,EAAsC,OAAO,WAAW,IAAxD;AADF,SAJF;AAOE;AAAA;AAAA,YAAK,WAAU,YAAf,EAA4B,OAAO,EAAC,SAAS,aAAV,EAAnC;AACE,iDAAK,WAAU,MAAf,GADF;AAEE;AAAA;AAAA,cAAQ,WAAU,YAAlB;AACA,uBAAS,WAAW,WADpB;AAEA,uBAAS,KAAK,gBAFd;AAAA;AAAA;AAFF;AAPF;AAJF,KADF;AAqBD;AAjCwC,CAAlB,CAAZ,CAAN;;AAwCP;AACA;AACA;;AAEA,SAAS,eAAT,cAAuD;AAAA,MAA5B,QAA4B,QAA5B,QAA4B;AAAA,MAAlB,IAAkB,QAAlB,IAAkB;AAAA,MAAT,MAAS,SAAT,MAAS;;AACrD,SAAO;AACL,cADK;AAEL,qCAA+B,MAA/B,gBAFK;AAGL,gBAAY,SAAS,KAAT,CAAe,MAAf,IAAyB,SAAS,KAAT,CAAe,MAAf,EAAuB,UAAhD,GAA6D;AAHpE,GAAP;AAKD;;AAED,SAAS,kBAAT,CAA4B,QAA5B,EAAsC;AACpC,SAAO;AACL,qBAAiB,+BAAmB,eAAnB,EAAoC,QAApC;AADZ,GAAP;AAGD;;kBAEc,yBAAQ,eAAR,EAAyB,kBAAzB,EAA6C,SAA7C,C","file":"CommentNew.jsx","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["// Container Core\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\n// Container Actions\nimport * as CommentsActions from 'app/renderer/main/modules/Comments/Comments.actions.js';\n\n// Component Core\nimport React from 'react';\nimport moment from 'moment';\n\n// Styles\nimport classNames from 'classnames';\nimport classes from './Comment.css';\n\n// Sub Components\nimport UserAvatar from 'app/renderer/main/components/Avatar/UserAvatar/UserAvatar.jsx';\nimport Editor from 'app/renderer/main/modules/Editor/Editor.jsx';\nimport EditorDisplay from 'app/renderer/main/modules/Editor/EditorDisplay.jsx';\nimport Button from 'app/renderer/main/components/Buttons/Button/Button'\n\n\n/////////////////////////////////////////////////////////////////////////////\n///////////////////////////////// COMPONENT /////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n\nexport const Component = React.createClass({\n  submitNewComment() {\n    this.props.commentsActions.newComment({\n      comment: {\n        task: this.props.taskId,\n        body: this.props.newComment.body\n      }\n    })\n  },\n  render() {\n    const { auth, newComment, entityModel, commentsActions } = this.props;\n\n    return (\n      <div className={classes.comment + ' layout-row'}>\n        <div className={classes.commentAvatar}>\n          <UserAvatar picture={auth.user.picture} size=\"33\" shape=\"square\" />\n        </div>\n        <div className={classes.commentBody + ' flex'}>\n          <div className={classes.commentHeader}>\n            New Comment\n          </div>\n          <div className={classes.commentContent}>\n            <Editor model={`${entityModel}.body`} value={newComment.body}/>\n          </div>\n          <div className=\"layout-row\" style={{padding: '0 10px 10px'}}>\n            <div className=\"flex\"></div>\n            <Button className=\"primary sm\"\n            loading={newComment.savePending}\n            onClick={this.submitNewComment}>Comment</Button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n});\n\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n///////////////////////////////// CONTAINER /////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n\nfunction mapStateToProps({ comments, auth }, {taskId}) {\n  return {\n    auth,\n    entityModel: `comments.tasks.${taskId}.newComment`,\n    newComment: comments.tasks[taskId] ? comments.tasks[taskId].newComment : {},\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    commentsActions: bindActionCreators(CommentsActions, dispatch),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Component);\n\n"]}