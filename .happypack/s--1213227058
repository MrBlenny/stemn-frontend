'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadUserData = loadUserData;
exports.authenticate = authenticate;
exports.unlink = unlink;
exports.login = login;
exports.register = register;
exports.setAuthToken = setAuthToken;
exports.removeAuthToken = removeAuthToken;
exports.initHttpHeaders = initHttpHeaders;
exports.removeHttpHeaders = removeHttpHeaders;
exports.clearUserData = clearUserData;
exports.logout = logout;

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _auth = require('../../main/modules/auth/auth.js');

var auth = _interopRequireWildcard(_auth);

var _projects = require('./projects.js');

var ProjectsActions = _interopRequireWildcard(_projects);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function loadUserData() {
  return function (dispatch) {
    dispatch({
      type: 'AUTH/LOAD_USER_DATA',
      payload: (0, _axios2.default)({
        url: '/api/v1/me',
        method: 'GET'
      }).then(function (response) {
        dispatch(ProjectsActions.getUserProjects({ userId: response.data._id }));
        return response;
      })
    });
  };
}

function authenticate(provider) {
  return function (dispatch) {
    return dispatch({
      type: 'AUTH/AUTHENTICATE',
      payload: auth.authenticate({
        provider: provider
      }).then(function (response) {
        dispatch(setAuthToken(response.data.token));
        dispatch(initHttpHeaders('bearer ' + response.data.token));
        setTimeout(function () {
          return dispatch(loadUserData());
        }, 1);
        return response;
      })
    });
  };
}

function unlink(provider) {
  return {
    type: 'AUTH/UNLINK',
    payload: (0, _axios2.default)({
      url: '/api/v1/auth/unlink/' + provider,
      method: 'POST'
    })
  };
}

function login(_ref) {
  var email = _ref.email;
  var password = _ref.password;

  return function (dispatch) {
    dispatch({
      type: 'AUTH/LOGIN',
      payload: (0, _axios2.default)({
        url: '/api/v1/auth/login',
        method: 'POST',
        data: {
          email: email,
          password: password
        }
      }).then(function (response) {
        dispatch(setAuthToken(response.data.token));
        dispatch(initHttpHeaders('bearer ' + response.data.token));
        setTimeout(function () {
          return dispatch(loadUserData());
        }, 1);
        return response;
      })
    });
  };
}

function register(_ref2) {
  var email = _ref2.email;
  var password = _ref2.password;
  var firstname = _ref2.firstname;
  var lastname = _ref2.lastname;

  return function (dispatch) {
    dispatch({
      type: 'AUTH/REGISTER',
      payload: (0, _axios2.default)({
        url: '/api/v1/auth/register',
        method: 'POST',
        data: {
          email: email,
          password: password,
          firstname: firstname,
          lastname: lastname
        }
      }).then(function (response) {
        dispatch(setAuthToken(response.data.token));
        dispatch(initHttpHeaders('bearer ' + response.data.token));
        setTimeout(function () {
          return dispatch(loadUserData());
        }, 1);
        return response;
      })
    });
  };
}

function setAuthToken(token) {
  return {
    type: 'AUTH/SET_AUTH_TOKEN',
    payload: token
  };
}

function removeAuthToken() {
  return {
    type: 'AUTH/REMOVE_AUTH_TOKEN'
  };
}

function initHttpHeaders(fullToken) {

  return {
    type: 'AUTH/INIT_HTTP_HEADER',
    payload: { fullToken: fullToken }
  };
}

function removeHttpHeaders() {
  return {
    type: 'AUTH/REMOVE_HTTP_HEADER'
  };
}

function clearUserData() {
  return {
    type: 'AUTH/CLEAR_USER_DATA'
  };
}

function logout() {
  return function (dispatch) {
    dispatch(clearUserData());
    dispatch(removeHttpHeaders());
    dispatch(removeAuthToken());
    dispatch({
      type: 'AUTH/LOGOUT'
    });
  };
}