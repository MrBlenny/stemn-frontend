'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _index = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\redbox-react\\lib\\index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-catch-errors\\lib\\index.js');

var _index4 = _interopRequireDefault(_index3);

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index5 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-hmr\\lib\\index.js');

var _index6 = _interopRequireDefault(_index5);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _substyle2 = require('substyle');

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _Mention = require('./Mention');

var _Mention2 = _interopRequireDefault(_Mention);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  Highlighter: {
    displayName: 'Highlighter'
  }
};

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Mentions/MentionsInput/Highlighter.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Mentions/MentionsInput/Highlighter.js',
  components: _components,
  locals: [],
  imports: [_react3.default, _index2.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2(_CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
  };
}

var _generateComponentKey = function _generateComponentKey(usedKeys, id) {
  if (!usedKeys.hasOwnProperty(id)) {
    usedKeys[id] = 0;
  } else {
    usedKeys[id]++;
  }
  return id + "_" + usedKeys[id];
};

var Highlighter = _wrapComponent('Highlighter')((_temp = _class = function (_Component) {
  _inherits(Highlighter, _Component);

  function Highlighter() {
    _classCallCheck(this, Highlighter);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Highlighter).apply(this, arguments));

    _this.state = { lastPosition: {} };
    return _this;
  }

  _createClass(Highlighter, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.notifyCaretPosition();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.notifyCaretPosition();
    }
  }, {
    key: 'notifyCaretPosition',
    value: function notifyCaretPosition() {
      var caret = this.refs.caret;


      if (!caret) {
        return;
      }

      var position = {
        left: caret.offsetLeft,
        top: caret.offsetTop
      };

      var lastPosition = this.state.lastPosition;


      if ((0, _isEqual2.default)(lastPosition, position)) {
        return;
      }

      this.setState({
        lastPosition: position
      });

      this.props.onCaretPositionChange(position);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props;
      var selection = _props.selection;
      var value = _props.value;
      var markup = _props.markup;
      var displayTransform = _props.displayTransform;
      var inputStyle = _props.inputStyle;

      // If there's a caret (i.e. no range selection), map the caret position into the marked up value

      var caretPositionInMarkup;
      if (selection.start === selection.end) {
        caretPositionInMarkup = _utils2.default.mapPlainTextIndex(value, markup, selection.start, 'START', displayTransform);
      }

      var resultComponents = [];
      var componentKeys = {};

      // start by appending directly to the resultComponents
      var components = resultComponents;

      var substringComponentKey = 0;

      var textIteratee = function textIteratee(substr, index, indexInPlainText) {
        // check whether the caret element has to be inserted inside the current plain substring
        if (_utils2.default.isNumber(caretPositionInMarkup) && caretPositionInMarkup >= index && caretPositionInMarkup <= index + substr.length) {
          // if yes, split substr at the caret position and insert the caret component
          var splitIndex = caretPositionInMarkup - index;
          components.push(_this2.renderSubstring(substr.substring(0, splitIndex), substringComponentKey));

          // add all following substrings and mention components as children of the caret component
          components = [_this2.renderSubstring(substr.substring(splitIndex), substringComponentKey)];
        } else {
          // otherwise just push the plain text substring
          components.push(_this2.renderSubstring(substr, substringComponentKey));
        }

        substringComponentKey++;
      };

      var mentionIteratee = function (markup, index, indexInPlainText, id, display, type, lastMentionEndIndex) {
        // generate a component key based on the id
        var key = _generateComponentKey(componentKeys, id);
        components.push(this.getMentionComponentForMatch(id, display, type, key));
      }.bind(this);
      _utils2.default.iterateMentionsMarkup(value, markup, textIteratee, mentionIteratee, displayTransform);

      // append a span containing a space, to ensure the last text line has the correct height
      components.push(" ");

      if (components !== resultComponents) {
        // if a caret component is to be rendered, add all components that followed as its children
        resultComponents.push(this.renderHighlighterCaret(components));
      }

      var _substyle = substyle(this.props, getModifiers(this.props));

      var style = _substyle.style;
      var className = _substyle.className;


      return _react3.default.createElement(
        'div',
        {
          className: className,
          style: _extends({}, inputStyle, style) },
        resultComponents
      );
    }
  }, {
    key: 'renderSubstring',
    value: function renderSubstring(string, key) {
      // set substring span to hidden, so that Emojis are not shown double in Mobile Safari
      return _react3.default.createElement(
        'span',
        _extends({}, substyle(this.props, "substring"), { key: key }),
        string
      );
    }

    // Returns a clone of the Mention child applicable for the specified type to be rendered inside the highlighter

  }, {
    key: 'getMentionComponentForMatch',
    value: function getMentionComponentForMatch(id, display, type, key) {
      var childrenCount = _react2.Children.count(this.props.children);
      var props = { id: id, display: display, key: key };

      if (childrenCount > 1) {
        if (!type) {
          throw new Error("Since multiple Mention components have been passed as children, the markup has to define the __type__ placeholder");
        }

        // detect the Mention child to be cloned
        var foundChild = null;
        _react2.Children.forEach(this.props.children, function (child) {
          if (!child) {
            return;
          }

          if (child.props.type === type) {
            foundChild = child;
          }
        });

        // clone the Mention child that is applicable for the given type
        return _react3.default.cloneElement(foundChild, props);
      }

      if (childrenCount === 1) {
        // clone single Mention child
        var child = this.props.children.length ? this.props.children[0] : _react2.Children.only(this.props.children);
        return _react3.default.cloneElement(child, props);
      }

      // no children, use default configuration
      return (0, _Mention2.default)(props);
    }

    // Renders an component to be inserted in the highlighter at the current caret position

  }, {
    key: 'renderHighlighterCaret',
    value: function renderHighlighterCaret(children) {
      return _react3.default.createElement(
        'span',
        _extends({}, substyle(this.props, "caret"), { ref: 'caret', key: 'caret' }),
        children
      );
    }
  }]);

  return Highlighter;
}(_react2.Component), _class.propTypes = {
  selection: _react2.PropTypes.shape({
    start: _react2.PropTypes.number,
    end: _react2.PropTypes.number
  }).isRequired,

  markup: _react2.PropTypes.string.isRequired,
  value: _react2.PropTypes.string.isRequired,

  displayTransform: _react2.PropTypes.func.isRequired,
  onCaretPositionChange: _react2.PropTypes.func.isRequired,
  inputStyle: _react2.PropTypes.object
}, _class.defaultProps = {
  value: "",
  inputStyle: {}
}, _temp));

exports.default = Highlighter;


var getModifiers = function getModifiers(props) {
  for (var _len = arguments.length, modifiers = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    modifiers[_key - 1] = arguments[_key];
  }

  return _extends({}, modifiers.reduce(function (result, modifier) {
    return _extends({}, result, _defineProperty({}, modifier, true));
  }, {}), {

    '&singleLine': props.singleLine
  });
};

var substyle = (0, _substyle2.defaultStyle)({
  position: 'relative',
  width: 'inherit',
  color: 'transparent',

  overflow: 'hidden',

  whiteSpace: 'pre-wrap',
  wordWrap: 'break-word',

  '&singleLine': {
    whiteSpace: 'pre',
    wordWrap: null
  },

  substring: {
    visibility: 'hidden'
  }
});
module.exports = exports['default'];