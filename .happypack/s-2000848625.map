{"version":3,"sources":["app\\renderer\\main\\modules\\FileCompare\\FileCompareInner\\FileCompareSlider\\FileCompareSlider.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAGA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJA;;;AAOA,IAAM,yCAAY,gBAAM,WAAN,CAAkB;AAAA;AAClC,iBADkC,6BACf;AACjB,WAAO;AACL,cAAQ,KADH;AAEL,mBAAa;AAFR,KAAP;AAID,GANiC;AAQlC,2BARkC,qCAQR,SARQ,EAQG;AACnC,QAAG,UAAU,QAAV,CAAmB,QAAnB,IAA+B,UAAU,QAAV,CAAmB,EAAlD,IAAwD,UAAU,QAAV,CAAmB,EAAnB,IAAyB,KAAK,KAAL,CAAW,WAA/F,EAA4G;AAC1G,UAAM,iBAAiB,KAAK,KAAL,CAAW,SAAX,CAAqB,WAA5C;AACA,UAAM,iBAAiB,UAAU,QAAV,GAAqB,GAArB,GAA2B,cAAlD;AACA,UAAI,gBAAiB,iBAAiB,UAAU,QAAV,CAAmB,MAAzD;AACA,UAAG,iBAAiB,CAApB,EAAuB;AAAC,wBAAgB,CAAhB;AAAkB,OAA1C,MACK,IAAG,iBAAiB,cAApB,EAAmC;AAAC,wBAAgB,cAAhB;AAA+B;AACxE,UAAM,eAAe,gBAAgB,cAAhB,GAAiC,GAAtD;AACA,WAAK,QAAL,CAAc,EAAC,QAAQ,IAAT,EAAd;AACA,WAAK,QAAL,CAAc,EAAC,aAAa,UAAU,QAAV,CAAmB,EAAjC,EAAd;AACA,WAAK,KAAL,CAAW,QAAX,CAAoB,YAApB;AACD,KAVD,MAWK;AACH,WAAK,QAAL,CAAc,EAAC,QAAQ,KAAT,EAAd;AACD;AACF,GAvBiC;AAyBlC,QAzBkC,oBAyBzB;AACP,QAAM,cAAc,KAAK,KAAL,CAAW,QAAX,GAAoB,GAAxC;AACA,WACE,uCAAK,WAAW,0BAAW,4BAAQ,MAAnB,sBAA6B,4BAAQ,MAArC,EAA+C,KAAK,KAAL,CAAW,MAA1D,EAAhB,EAAoF,OAAO,EAAC,MAAM,WAAP,EAA3F,GADF;AAGD;AA9BiC,CAAlB,CAAZ,CAAN;;kBAkCe,8BAAU,SAAV,EAAqB,EAAC,OAAO,IAAR,EAArB,C","file":"FileCompareSlider.jsx","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["import React from 'react';\n\n// Styles\nimport classNames from 'classnames';\nimport classes from './FileCompareSlider.css'\n\nimport clickDrag from 'react-clickdrag';\n\n\nconst Component = React.createClass({\n  getInitialState () {\n    return {\n      active: false,\n      lastEventId: ''\n    };\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if(nextProps.dataDrag.isMoving && nextProps.dataDrag.id && nextProps.dataDrag.id != this.state.lastEventId) {\n      const containerWidth = this.props.container.offsetWidth;\n      const prevPositionPx = nextProps.position / 100 * containerWidth;\n      let newPositionPx  = prevPositionPx + nextProps.dataDrag.deltaX;\n      if(newPositionPx <= 0) {newPositionPx = 0}\n      else if(newPositionPx >= containerWidth){newPositionPx = containerWidth}\n      const positionPerc = newPositionPx / containerWidth * 100;\n      this.setState({active: true});\n      this.setState({lastEventId: nextProps.dataDrag.id});\n      this.props.changeFn(positionPerc);\n    }\n    else {\n      this.setState({active: false});\n    }\n  },\n\n  render() {\n    const translation = this.props.position+'%';\n    return(\n      <div className={classNames(classes.slider, {[classes.active] : this.state.active})} style={{left: translation}}></div>\n    )\n  }\n});\n\n\nexport default clickDrag(Component, {touch: true});\n\n"]}