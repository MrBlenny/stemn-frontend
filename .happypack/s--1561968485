'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnimateSvg = undefined;

var _index = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\redbox-react\\lib\\index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-catch-errors\\lib\\index.js');

var _index4 = _interopRequireDefault(_index3);

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index5 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-hmr\\lib\\index.js');

var _index6 = _interopRequireDefault(_index5);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ProgressButton = require('./ProgressButton.css');

var _ProgressButton2 = _interopRequireDefault(_ProgressButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _components = {
  _component: {},
  _component2: {}
};

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/components/Buttons/ProgressButton/ProgressButton.jsx',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/components/Buttons/ProgressButton/ProgressButton.jsx',
  components: _components,
  locals: [],
  imports: [_react3.default, _index2.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2(_CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
  };
}

// Styles


var AnimateSvg = exports.AnimateSvg = _wrapComponent('_component')(_react3.default.createClass({
  displayName: 'AnimateSvg',

  svgEl: '',
  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var draw = _props.draw;

    var newProps = {
      ref: 'svg'
    };
    if (!this.svgEl && this.refs.svg) {
      this.svgEl = new SVGEl(this.refs.svg);
    }
    if (this.svgEl) {
      this.svgEl.draw(draw);
    }
    return _react3.default.cloneElement(children, newProps);
  }
}));

exports.default = _wrapComponent('_component2')(_react3.default.createClass({
  getInitialState: function getInitialState() {
    return {
      status: '',
      disabled: false,
      drawLoading: 0,
      drawSuccess: 0
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var prevProps = this.props;

    // If we just began loading:
    if (nextProps.loading && (!prevProps || !prevProps.loading)) {
      this.startLoading();
    }
    // If we finished loading
    else if (prevProps && prevProps.loading && !nextProps.loading) {
        this.loadingComplete();
      }
  },

  partialLoadTimeout: null,
  successTimeout: null,
  successIconTimeout: null,
  resetTimeout: null,
  clearTimeouts: function clearTimeouts() {
    clearTimeout(this.partialLoadTimeout);
    clearTimeout(this.successTimeout);
    clearTimeout(this.successIconTimeout);
    clearTimeout(this.resetTimeout);
  },
  componentWillUnmount: function componentWillUnmount() {
    this.clearTimeouts();
  },
  startLoading: function startLoading() {
    var _this = this;

    this.clearTimeouts();
    this.setState({
      status: 'loading',
      disabled: true,
      drawLoading: 0,
      drawSuccess: 0
    });
    this.partialLoadTimeout = setTimeout(function () {
      _this.setState({ drawLoading: 0.7 });
    }, 100);
  },
  loadingComplete: function loadingComplete() {
    var _this2 = this;

    this.clearTimeouts();
    this.setState({ drawLoading: 1 });

    this.successTimeout = setTimeout(function () {
      _this2.setState({ status: 'success' });
      _this2.successIconTimeout = setTimeout(function () {
        _this2.setState({ drawSuccess: 1 });
      }, 100);
      _this2.resetTimeout = setTimeout(function () {
        _this2.setState({ status: '', disabled: false, drawLoading: 0 });
      }, 2000);
    }, 700);
  },
  render: function render() {
    var _props2 = this.props;
    var children = _props2.children;
    var _onClick = _props2.onClick;
    var loading = _props2.loading;
    var className = _props2.className;
    var _state = this.state;
    var status = _state.status;
    var disabled = _state.disabled;
    var drawLoading = _state.drawLoading;
    var drawSuccess = _state.drawSuccess;


    var Progress = _react3.default.createElement(
      'svg',
      { className: _ProgressButton2.default.progressCircle, width: '40', height: '40', viewBox: '0 0 40 40' },
      _react3.default.createElement('path', { d: 'm1.5,20c0,-10.22099 8.27901,-18.5 18.5,-18.5c10.22099,0 18.5,8.27901 18.5,18.5c0,10.22099 -8.27901,18.5 -18.5,18.5c-10.22099,0 -18.5,-8.27901 -18.5,-18.5z' })
    );
    var Checkmark = _react3.default.createElement(
      'svg',
      { className: _ProgressButton2.default.checkmark, width: '40', height: '40', viewBox: '0 0 70 70' },
      _react3.default.createElement('path', { d: 'm31.5,46.5l15.3,-23.2' }),
      _react3.default.createElement('path', { d: 'm31.5,46.5l-8.5,-7.1' })
    );
    var Cross = _react3.default.createElement(
      'svg',
      { className: _ProgressButton2.default.cross, width: '40', height: '40', viewBox: '0 0 70 70' },
      _react3.default.createElement('path', { d: 'm35,35l-9.3,-9.3' }),
      _react3.default.createElement('path', { d: 'm35,35l9.3,9.3' }),
      _react3.default.createElement('path', { d: 'm35,35l-9.3,9.3' }),
      _react3.default.createElement('path', { d: 'm35,35l9.3,-9.3' })
    );

    return _react3.default.createElement(
      'div',
      { className: (0, _classnames2.default)(_ProgressButton2.default.progressButton, className, _defineProperty({}, _ProgressButton2.default.loading, status == 'loading'), _defineProperty({}, _ProgressButton2.default.error, status == 'error'), _defineProperty({}, _ProgressButton2.default.success, status == 'success')) },
      _react3.default.createElement(
        'button',
        { onClick: function onClick() {
            if (!disabled) {
              _onClick();
            }
          } },
        _react3.default.createElement(
          'span',
          null,
          children
        )
      ),
      _react3.default.createElement(
        AnimateSvg,
        { draw: drawLoading },
        Progress
      ),
      _react3.default.createElement(
        AnimateSvg,
        { draw: drawSuccess },
        Checkmark
      ),
      _react3.default.createElement(
        AnimateSvg,
        null,
        Cross
      )
    );
  }
}));

////////////////////////////////////////////////////////////

function SVGEl(el) {
  this.el = el;
  // the path elements
  this.paths = [].slice.call(this.el.querySelectorAll('path'));
  // we will save both paths and its lengths in arrays
  this.pathsArr = new Array();
  this.lengthsArr = new Array();
  this._init();
}

SVGEl.prototype._init = function () {
  var self = this;
  this.paths.forEach(function (path, i) {
    self.pathsArr[i] = path;
    path.style.strokeDasharray = self.lengthsArr[i] = path.getTotalLength();
  });
  // undraw stroke
  this.draw(0);
};

SVGEl.prototype.draw = function (val) {
  for (var i = 0, len = this.pathsArr.length; i < len; ++i) {
    this.pathsArr[i].style.strokeDashoffset = this.lengthsArr[i] * (1 - val);
  }
};