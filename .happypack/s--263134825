'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reducer;

var _icepick = require('icepick');

var _icepick2 = _interopRequireDefault(_icepick);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialState = {};

function reducer() {
  var state = arguments.length <= 0 || arguments[0] === undefined ? initialState : arguments[0];
  var action = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  switch (action.type) {
    //    case 'FILE_COMPARE/INIT':
    //      return i.merge(state, {
    //        [action.payload.compareId]: {
    //          mode: 'single',
    //          previewType1: action.payload.previewType1,
    //          previewType2: action.payload.previewType2,
    //          file1: action.payload.file1,
    //          file2: action.payload.file2,
    //        }
    //      })
    case 'FILE_COMPARE/CHANGE_MODE':
      return _icepick2.default.merge(state, _defineProperty({}, action.payload.compareId, {
        mode: action.payload.mode
      }));
    default:
      return state;
  }
}
module.exports = exports['default'];