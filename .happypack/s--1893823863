'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = undefined;

var _index = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\redbox-react\\lib\\index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-catch-errors\\lib\\index.js');

var _index4 = _interopRequireDefault(_index3);

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index5 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-hmr\\lib\\index.js');

var _index6 = _interopRequireDefault(_index5);

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _FileListActions = require('./FileList.actions.js');

var FileListActions = _interopRequireWildcard(_FileListActions);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _FileList = require('./FileList.css');

var _FileList2 = _interopRequireDefault(_FileList);

var _FileBreadCrumbs = require('./components/FileBreadCrumbs');

var _FileBreadCrumbs2 = _interopRequireDefault(_FileBreadCrumbs);

var _FileRow = require('./components/FileRow');

var _FileRow2 = _interopRequireDefault(_FileRow);

var _LoadingOverlay = require('app/renderer/main/components/Loading/LoadingOverlay/LoadingOverlay.jsx');

var _LoadingOverlay2 = _interopRequireDefault(_LoadingOverlay);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/FileList/FileList.jsx',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/FileList/FileList.jsx',
  components: _components,
  locals: [],
  imports: [_react3.default, _index2.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2(_CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
  };
} // Container Core


// Container Actions


// Component Core


// Styles


// Sub Components


/////////////////////////////////////////////////////////////////////////////
///////////////////////////////// COMPONENT /////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

var Component = exports.Component = _wrapComponent('_component')(_react3.default.createClass({
  displayName: 'Component',
  componentWillMount: function componentWillMount() {
    if (this.props.options.explore == 'drive' || this.props.options.explore == 'dropbox') {
      this.props.FileListActions.exploreFolder({
        provider: this.props.options.explore,
        folderId: this.props.path
      });
    } else {
      this.props.FileListActions.fetchFiles({
        projectId: this.props.projectId,
        path: this.props.path
      });
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this.props.path != nextProps.path || this.props.projectId != nextProps.projectId) {
      if (nextProps.options.explore == 'drive' || nextProps.options.explore == 'dropbox') {
        this.props.FileListActions.exploreFolder({
          provider: nextProps.options.explore,
          folderId: nextProps.path
        });
      } else {
        this.props.FileListActions.fetchFiles({
          projectId: nextProps.projectId,
          path: nextProps.path
        });
      }
    }
  },
  render: function render() {
    var _props = this.props;
    var files = _props.files;
    var singleClickFn = _props.singleClickFn;
    var doubleClickFn = _props.doubleClickFn;
    var crumbClickFn = _props.crumbClickFn;
    var selected = _props.selected;
    var options = _props.options;


    var displayResults = function displayResults() {
      var filesFiltered = options.foldersOnly && files.entries && files.entries.length > 0 ? files.entries.filter(function (file) {
        return file.type == 'folder';
      }) : files.data;
      if (filesFiltered && filesFiltered.length > 0) {
        return filesFiltered.map(function (file) {
          return _react3.default.createElement(_FileRow2.default, { key: file.fileId, file: file, singleClick: singleClickFn, doubleClick: doubleClickFn, isActive: selected && selected.fileId == file.fileId });
        });
      } else {
        return _react3.default.createElement(
          'div',
          { style: { padding: '15px' } },
          'No results'
        );
      }
    };

    return _react3.default.createElement(
      'div',
      null,
      _react3.default.createElement(
        'div',
        { className: _FileList2.default.breadcrumbs },
        _react3.default.createElement(_FileBreadCrumbs2.default, { meta: files && files.folder ? files.folder : '', clickFn: crumbClickFn })
      ),
      _react3.default.createElement(
        'div',
        { className: 'rel-box', style: { height: '300px', overflowY: 'auto' } },
        files && !files.loading ? displayResults() : '',
        _react3.default.createElement(_LoadingOverlay2.default, { show: !files || files.loading })
      )
    );
  }
}));

/////////////////////////////////////////////////////////////////////////////
///////////////////////////////// CONTAINER /////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

function mapStateToProps(_ref, _ref2) {
  var fileList = _ref.fileList;
  var projectId = _ref2.projectId;
  var path = _ref2.path;
  var singleClickFn = _ref2.singleClickFn;
  var doubleClickFn = _ref2.doubleClickFn;
  var crumbClickFn = _ref2.crumbClickFn;
  var options = _ref2.options;


  return {
    files: options.explore == 'drive' || options.explore == 'dropbox' ? fileList[options.explore + '-' + path] : fileList[projectId + '-' + path],
    projectId: projectId,
    path: path,
    singleClickFn: singleClickFn,
    doubleClickFn: doubleClickFn,
    crumbClickFn: crumbClickFn,
    options: options
  };
}

function mapDispatchToProps(dispatch) {
  return {
    FileListActions: (0, _redux.bindActionCreators)(FileListActions, dispatch)
  };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Component);