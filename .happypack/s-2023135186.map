{"version":3,"sources":["app\\renderer\\main\\modules\\Changes\\Changes.actions.js"],"names":[],"mappings":"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","file":"Changes.actions.js","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["import { actions }           from 'react-redux-form';\nimport { show as showToast } from '../Toasts/Toasts.actions.js';\nimport { showModal }         from '../Modal/Modal.actions.js';\nimport { parseMentions }     from '../Mentions/Mentions.utils.js';\nimport { updateTask }        from '../Tasks/Tasks.actions.js';\nimport i                     from 'icepick';\nimport http                  from 'axios';\nimport { get }               from 'lodash';\n\nexport function deselect({projectId}) {\n  return {\n    type: 'CHANGES/DESELECT_FILE_CHANGE',\n    payload: {\n      projectId,\n    }\n  }\n}\nexport function selectedFileChange({projectId, selected}) {\n  return {\n    type: 'CHANGES/SELECTED_FILE_CHANGE',\n    payload: {\n      projectId,\n      selected\n    }\n  }\n}\n\nexport function toggleAll({projectId, value}) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: 'CHANGES/TOGGLE_ALL_CHANGED_FILES',\n      payload: {projectId, value}\n    })\n  };\n}\n\n\nexport function fetchChanges({projectId}) {\n  return (dispatch) => {\n    dispatch(pullChanges({projectId}))\n    dispatch({\n      type:'CHANGES/FETCH_CHANGES',\n      http: true,\n      payload: {\n        method: 'GET',\n        url: `/api/v1/sync/timeline/${projectId}`,\n        params: {\n          types: ['changes'],\n        },\n        meta: {\n          projectId\n        }\n      }\n    })\n  }\n}\n\nexport function pullChanges({projectId}) {\n  return {\n    type:'CHANGES/PULL_REMOTE_CHANGES',\n    http: true,\n    payload: {\n      method: 'GET',\n      url: `/api/v1/sync/pullRemoteChanges/${projectId}`,\n    }\n  }\n}\n\nexport function mentionTasksModal({projectId, mentions}) {\n  return (dispatch) => {\n    dispatch(showModal({\n      modalType: 'TASK_COMMIT',\n      modalProps: {\n        projectId: projectId\n      },\n      modalConfirm: {\n        functionAlias: 'ChangesActions.mentionTasks',\n        functionInputs: { projectId }\n      }\n    }))\n  }\n}\n\nexport function mentionTasks({projectId, mentions}) {\n  return {\n    type:'CHANGES/MENTION_TASKS',\n    payload: {\n      projectId,\n      mentions\n    }\n  }\n}\n\nexport function commit({projectId, summary, description}) {\n  return (dispatch, getState) => {\n    const changes = getState().changes[projectId];\n\n    // Get the files which have been changed\n    const files = Object.keys(changes.checked).filter(key => changes.checked[key]);\n\n    // Get the revisions from the selected files\n    const revisions = changes.data.filter(item => changes.checked[item.data.fileId]).map((item)=>item._id);\n\n    dispatch({\n      type: 'CHANGES/COMMIT',\n      payload: http({\n        method: 'POST',\n        url: `/api/v1/sync/commit/${projectId}`,\n        data: {\n          revisions,\n          summary,\n          description,\n        }\n      }).then((response)=>{\n        dispatch(showToast({\n          title: `${files.length} files commited.`,\n          actions: [{\n            text: 'Undo',\n            action: {\n              functionAlias: 'ChangesActions.deleteCommit',\n              functionInputs: {\n                commitId: response.data._id,\n                projectId\n              }\n            }\n          }]\n        }))\n        // Get the mentions\n        const mentions = parseMentions(response.data.description);\n        // If mentionType: task-complete, we set the task to complete.\n        mentions.forEach(mention => {\n          if(mention.mentionType == 'task-complete'){\n            dispatch(actions.change(`tasks.data.${mention.entityId}.data.complete`, true));\n          }\n        });\n        return response\n      }),\n      meta: {\n        cacheKey: projectId\n      }\n    })\n  }\n}\n\nexport function deleteCommit({commitId, projectId}) {\n  return (dispatch) => {\n    dispatch({\n      type: 'CHANGES/DELETE_COMMIT',\n      payload: http({\n        method: 'DELETE',\n        url: `/api/v1/commits/${commitId}`,\n      }).then(response => {\n        dispatch(fetchChanges({projectId}))\n      })\n    })\n  }\n}\n"]}