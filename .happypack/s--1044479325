'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.default = function () {
  var state = arguments.length <= 0 || arguments[0] === undefined ? initialState : arguments[0];
  var action = arguments[1];

  return (0, _reactReduxForm.modeled)(mainReducer, 'changes')(state, action);
};

var _icepick = require('icepick');

var _icepick2 = _interopRequireDefault(_icepick);

var _reactReduxForm = require('react-redux-form');

var _MentionsUtils = require('../Mentions/Mentions.utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialState = {};

var mainReducer = function mainReducer(state, action) {
  var _ret = function () {
    switch (action.type) {
      case 'CHANGES/DESELECT_FILE_CHANGE':
        return {
          v: _icepick2.default.assocIn(state, [action.payload.projectId, 'selected'], {})
        };
      case 'CHANGES/SELECTED_FILE_CHANGE':
        return {
          v: _icepick2.default.assocIn(state, [action.payload.projectId, 'selected'], action.payload.selected)
        };
      case 'CHANGES/MENTION_TASKS':
        return {
          v: _icepick2.default.updateIn(state, [action.payload.projectId, 'description'], function (description) {
            var existingMentions = (0, _MentionsUtils.parseMentions)(description);
            var uniqueNewMentions = (0, _MentionsUtils.removeExistingMentions)(action.payload.mentions, existingMentions);
            return (0, _MentionsUtils.addMentionsToText)(state[action.payload.projectId].description, uniqueNewMentions);
          })
        };
      case 'CHANGES/TOGGLE_ALL_CHANGED_FILES':
        return {
          v: _icepick2.default.updateIn(state, [action.payload.projectId], function (changes) {
            var checked = changes.data.reduce(function (obj, param) {
              obj[param.data.fileId] = action.payload.value;
              return obj;
            }, {});
            return _icepick2.default.assoc(changes, 'checked', checked);
          })
        };
      case 'CHANGES/FETCH_CHANGES_FULFILLED':
        return {
          v: _icepick2.default.merge(state, _defineProperty({}, action.payload.config.meta.projectId, {
            data: action.payload.data,
            selected: {}
          }))
        };
      case 'CHANGES/COMMIT_FULFILLED':
        var idsToRemove = action.payload.data.revisions.map(function (item) {
          return item._id;
        });
        var remainingRevisions = state[action.meta.cacheKey].data.filter(function (item) {
          return !idsToRemove.includes(item._id);
        });
        return {
          v: _icepick2.default.merge(state, _defineProperty({}, action.meta.cacheKey, {
            summary: '',
            description: '',
            data: remainingRevisions,
            checked: {}
          }))
        };
      default:
        return {
          v: state
        };
    }
  }();

  if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
};

module.exports = exports['default'];