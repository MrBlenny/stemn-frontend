'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _index = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\redbox-react\\lib\\index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-catch-errors\\lib\\index.js');

var _index4 = _interopRequireDefault(_index3);

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index5 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-hmr\\lib\\index.js');

var _index6 = _interopRequireDefault(_index5);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _markdownIt = require('markdown-it');

var _markdownIt2 = _interopRequireDefault(_markdownIt);

var _markdownItEmoji = require('markdown-it-emoji');

var _markdownItEmoji2 = _interopRequireDefault(_markdownItEmoji);

var _EditorDisplay = require('./EditorDisplay.css');

var _EditorDisplay2 = _interopRequireDefault(_EditorDisplay);

var _MentionsUtils = require('app/renderer/main/modules/Mentions/Mentions.utils.js');

var _htmlToReact = require('html-to-react');

var _htmlToReact2 = _interopRequireDefault(_htmlToReact);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactRedux = require('react-redux');

var _ModalActions = require('app/renderer/main/modules/Modal/Modal.actions.js');

var ModalActions = _interopRequireWildcard(_ModalActions);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {},
  _component2: {}
};

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Editor/EditorDisplay.jsx',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Editor/EditorDisplay.jsx',
  components: _components,
  locals: [],
  imports: [_react3.default, _index2.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2(_CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
  };
}

var TaskMention = _wrapComponent('_component')(_react3.default.createClass({
  displayName: 'TaskMention',
  showModal: function showModal() {
    this.props.dispatch(ModalActions.showModal({
      modalType: 'TASK',
      modalProps: {
        taskId: this.props.entityId
      }
    }));
  },
  render: function render() {
    var _props = this.props;
    var entityId = _props.entityId;
    var mentionId = _props.mentionId;
    var mentionType = _props.mentionType;
    var children = _props.children;

    return _react3.default.createElement(
      'a',
      { id: mentionId,
        className: _EditorDisplay2.default.mention,
        href: mentionType == 'user' ? '/users/' + entityId : '/tasks/' + entityId,
        onClick: this.showModal },
      children
    );
  }
}));
var TaskMentionConnected = (0, _reactRedux.connect)()(TaskMention);

/////////////////////////////////////////////////////////////////////////

var htmlToReactParser = new _htmlToReact2.default.Parser();

var md = (0, _markdownIt2.default)({
  html: true,
  linkify: true,
  typographer: true
});
md.use(_markdownItEmoji2.default);

var processNodeDefinitions = new _htmlToReact2.default.ProcessNodeDefinitions(_react3.default);
var processingInstructions = [{
  // Remove the '@' trigger if the next element is a mention
  shouldProcessNode: function shouldProcessNode(node) {
    return node.type == 'text' && node.data.endsWith('@') && node.next && node.next.attribs && (0, _MentionsUtils.validateMention)(node.next.attribs.href);
  },
  processNode: function processNode(node, children, index) {
    return _react3.default.createElement(
      'span',
      null,
      node.data.slice(0, -1)
    );
  }
}, {
  // Add the mention to replace the anchor
  shouldProcessNode: function shouldProcessNode(node) {
    return node.name == 'a' && (0, _MentionsUtils.validateMention)(node.attribs.href);
  },
  processNode: function processNode(node, children, index) {
    var _node$attribs$href$sp = node.attribs.href.split(':');

    var _node$attribs$href$sp2 = _slicedToArray(_node$attribs$href$sp, 3);

    var entityId = _node$attribs$href$sp2[0];
    var mentionType = _node$attribs$href$sp2[1];
    var mentionId = _node$attribs$href$sp2[2];

    var innerTextFn = {
      user: function user(display) {
        return '@' + display;
      },
      task: function task(display) {
        return '#' + display + ' (related)';
      },
      'task-complete': function taskComplete(display) {
        return '#' + display + ' (complete)';
      }
    };
    var innerText = innerTextFn[mentionType] ? innerTextFn[mentionType](node.children[0].data) : node.children[0].data;

    return _react3.default.createElement(
      TaskMentionConnected,
      {
        key: index,
        entityId: entityId,
        mentionId: mentionId,
        mentionType: mentionType },
      innerText
    );
  }
}, {
  shouldProcessNode: function shouldProcessNode(node) {
    return true;
  },
  processNode: processNodeDefinitions.processDefaultNode
}];

exports.default = _wrapComponent('_component2')(_react3.default.createClass({
  getMarkdownText: function getMarkdownText() {
    var rawMarkup = '<div>' + md.render(this.props.value) + '</div>';
    return htmlToReactParser.parseWithInstructions(rawMarkup, function () {
      return true;
    }, processingInstructions);
  },
  render: function render() {
    var _props2 = this.props;
    var value = _props2.value;
    var onClick = _props2.onClick;

    return _react3.default.createElement(
      'div',
      { onClick: onClick },
      _react3.default.createElement(
        'div',
        { className: _EditorDisplay2.default.display },
        this.getMarkdownText(value)
      )
    );
  }
}));
module.exports = exports['default'];