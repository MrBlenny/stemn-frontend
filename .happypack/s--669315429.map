{"version":3,"sources":["app\\renderer\\main\\modules\\Tasks\\TaskLabelsEdit\\TaskLabelsEdit.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAEA;;;;AAIA;;;;AACA;;;;AAGA;;AACA;;IAAY,Y;;AAEZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAnBA;;;AAOA;;;AAIA;;;AAWO,IAAM,6DAAY,gBAAM,WAAN,CAAkB;AAAA;AACzC,eADyC,yBAC3B,KAD2B,EACpB,KADoB,EACd;AACzB,SAAK,KAAL,CAAW,QAAX,CACE,aAAa,WAAb,CAAyB;AACvB,eAAS,mEADc;AAEvB,oBAAc;AACZ,uBAAe,oBADH;AAEZ,wBAAgB,CAAC,KAAD,EAAQ,KAAR;AAFJ;AAFS,KAAzB,CADF;AASD,GAXwC;AAazC,QAbyC,oBAahC;AAAA;;AAAA,iBAC4B,KAAK,KADjC;AAAA,QACC,KADD,UACC,KADD;AAAA,QACQ,KADR,UACQ,KADR;AAAA,QACe,QADf,UACe,QADf;;AAGP;;AACA,QAAG,MAAM,MAAN,IAAgB,CAAnB,EAAqB;AACnB,eAAS,wBAAQ,IAAR,CAAa,KAAb,EAAoB;AAC3B,aAAK,wBADsB;AAE3B,eAAO,EAFoB;AAG3B,cAAM;AAHqB,OAApB,CAAT;AAKD;AACD;AAPA,SAQK,IAAG,MAAM,MAAM,MAAN,GAAa,CAAnB,EAAsB,IAAtB,CAA2B,MAA3B,IAAqC,CAAxC,EAA0C;AAC7C,iBAAS,wBAAQ,IAAR,CAAa,KAAb,EAAoB;AAC3B,eAAK,wBADsB;AAE3B,iBAAO,EAFoB;AAG3B,gBAAM;AAHqB,SAApB,CAAT;AAKD;;AAED,WACE;AAAA;AAAA;AACG,YAAM,GAAN,CAAU,UAAC,KAAD,EAAQ,KAAR;AAAA,eACT;AAAA;AAAA,YAAK,KAAK,MAAM,GAAhB,EAAqB,WAAW,yBAAQ,GAAR,GAAc,uCAA9C;AACE;AAAA;AAAA,cAAK,WAAW,yBAAQ,WAAxB;AACE;AAAA;AAAA,gBAAa,aAAY,OAAzB;AACE,uDAAO,SAAS,MAAM,GAAtB,EAA2B,WAAW,yBAAQ,MAA9C,EAAsD,OAAO,EAAC,YAAY,MAAM,KAAnB,EAA7D,GADF;AAEE;AACE,uBAAU,KAAV,SAAmB,KAAnB,YADF;AAEE,uBAAO,MAAM;AAFf;AAFF,aADF;AAQE;AACE,qBAAU,KAAV,SAAmB,KAAnB,YADF;AAEE,qBAAO,MAAM,KAFf;AAGE,yBAAW,yBAAQ,gBAAR,GAA2B,WAHxC;AAIE,oBAAK,MAJP;AAKE,2BAAY,YALd;AAME,kBAAI,MAAM;AANZ;AARF,WADF;AAmBE;AAAA;AAAA,cAAK,WAAW,yBAAQ,IAAR,GAAe,OAA/B;AACE;AACE,qBAAU,KAAV,SAAmB,KAAnB,WADF;AAEE,qBAAO,MAAM,IAFf;AAGE,yBAAU,UAHZ;AAIE,oBAAK,MAJP;AAKE,2BAAY;AALd;AADF,WAnBF;AA4BE;AAAA;AAAA,cAAa,aAAY,OAAzB;AACE;AAAA;AAAA;AACE,mEAAa,MAAK,MAAlB;AADF,aADF;AAIE;AAAA;AAAA,gBAAK,WAAU,aAAf;AACE;AAAA;AAAA,kBAAG,SAAS;AAAA,2BAAI,MAAK,aAAL,CAAmB,KAAnB,EAA0B,KAA1B,CAAJ;AAAA,mBAAZ;AAAA;AAAA;AADF;AAJF;AA5BF,SADS;AAAA,OAAV;AADH,KADF;AA2CD;AA5EwC,CAAlB,CAAZ,CAAN;;kBA+EQ,2BAAU,SAAV,C","file":"TaskLabelsEdit.jsx","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["// Component Core\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport getUuid from 'app/shared/helpers/getUuid.js';\n\n\n// Styles\nimport classNames from 'classnames';\nimport classes from './TaskLabelsEdit.css';\n\n// Actions\nimport { actions } from 'react-redux-form';\nimport * as ModalActions from 'app/renderer/main/modules/Modal/Modal.actions.js';\n\nimport PopoverMenu from 'app/renderer/main/components/PopoverMenu/PopoverMenu';\nimport Input from 'app/renderer/main/components/Input/Input/Input';\nimport SimpleIconButton from 'app/renderer/main/components/Buttons/SimpleIconButton/SimpleIconButton'\nimport MdMoreHoriz from 'react-icons/md/more-horiz';\nimport ColorSelect from './ColorSelect/ColorSelect.jsx'\n\n\nexport const Component = React.createClass({\n  confirmDelete(model, index){\n    this.props.dispatch(\n      ModalActions.showConfirm({\n        message: 'If you delete a label it will be removed from all existing tasks.',\n        modalConfirm: {\n          functionAlias: 'FormActions.remove',\n          functionInputs: [model, index]\n        }\n      })\n    )\n  },\n\n  render() {\n    const { model, value, dispatch } = this.props;\n\n    // If it is empty, push on a label\n    if(value.length == 0){\n      dispatch(actions.push(model, {\n        _id: getUuid(),\n        color: '',\n        name: '',\n      }))\n    }\n    // Else, if the name of the last label exists, add another\n    else if(value[value.length-1].name.length >= 1){\n      dispatch(actions.push(model, {\n        _id: getUuid(),\n        color: '',\n        name: '',\n      }))\n    }\n\n    return (\n      <div>\n        {value.map((label, index)=>\n          <div key={label._id} className={classes.row + ' layout-row layout-align-start-center'}>\n            <div className={classes.colorSelect}>\n              <PopoverMenu preferPlace=\"above\">\n                <label htmlFor={label._id} className={classes.swatch} style={{background: label.color}}/>\n                <ColorSelect\n                  model={`${model}[${index}].color`}\n                  value={label.color}\n                />\n              </PopoverMenu>\n              <Input \n                model={`${model}[${index}].color`} \n                value={label.color} \n                className={classes.colorSelectInput + ' dr-input'} \n                type=\"text\" \n                placeholder=\"Color Code\" \n                id={label._id}\n              />\n            </div>\n\n            <div className={classes.name + ' flex'}>\n              <Input \n                model={`${model}[${index}].name`}\n                value={label.name}\n                className=\"dr-input\" \n                type=\"text\" \n                placeholder=\"Label Name\"\n              />\n            </div>\n            <PopoverMenu preferPlace=\"right\">\n              <SimpleIconButton>\n                <MdMoreHoriz size=\"20px\"/>\n              </SimpleIconButton>\n              <div className=\"PopoverMenu\">\n                <a onClick={()=>this.confirmDelete(model, index)}>Remove Label</a>\n              </div>\n            </PopoverMenu>\n          </div>\n        )}\n      </div>\n    )\n  }\n});\n\nexport default connect()(Component)\n"]}