'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emptyHover = exports.endDrag = exports.beginDrag = exports.cardDrop = exports.cardHover = undefined;

var _reactDom = require('react-dom');

var _lodash = require('lodash');

var throttleModelUpdate = (0, _lodash.throttle)(function (throttledFn) {
  return throttledFn();
}, 100, {
  leading: true,
  trailing: false
});

var endDragProps = {};
var beginDragProps = {};

var cardHover = exports.cardHover = function cardHover(props, monitor, component) {
  var dragIndex = monitor.getItem().index;
  var dragId = monitor.getItem().id;

  var hoverIndex = props.index;
  var hoverId = props.id;

  // Don't replace items with themselves
  if (dragId === hoverId) {
    return;
  }

  // Determine rectangle on screen
  var hoverBoundingRect = (0, _reactDom.findDOMNode)(component).getBoundingClientRect();

  // Get vertical middle
  var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;

  // Determine mouse position
  var clientOffset = monitor.getClientOffset();

  // Get pixels to the top
  var hoverClientY = clientOffset.y - hoverBoundingRect.top;

  // Only perform the move when the mouse has crossed half of the items height
  // When dragging downwards, only move when the cursor is below 50%
  // When dragging upwards, only move when the cursor is above 50%

  // Dragging downwards
  if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {
    return;
  }

  // Dragging upwards
  if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {
    return;
  }

  // Time to actually perform the action
  throttleModelUpdate(function () {

    endDragProps.id = props.id;
    endDragProps.index = props.index;
    endDragProps.groupId = props.groupId;
    // If the dragged item index is less than the destination index, we set it to after
    var dragIndexInGroup = props.tasks.findIndex(function (taskId) {
      return taskId == beginDragProps.id;
    });
    endDragProps.after = dragIndexInGroup != -1 ? dragIndexInGroup < endDragProps.index : false;

    props.moveCard({
      task: dragId,
      destinationTask: hoverId,
      destinationGroup: props.groupId
    });
  });

  // Note: we're mutating the monitor item here!
  // Generally it's better to avoid mutations,
  // but it's good here for the sake of performance
  // to avoid expensive index searches.
  monitor.getItem().index = hoverIndex;
};

var cardDrop = exports.cardDrop = function cardDrop(props, monitor, component) {};

var beginDrag = exports.beginDrag = function beginDrag(props, monitor, component) {
  props.beginDrag(props.id);

  beginDragProps.id = props.id;
  beginDragProps.index = props.index;
  beginDragProps.groupId = props.groupId;

  endDragProps = {};
  return {
    id: props.id,
    groupId: props.groupId,
    index: props.index,
    tasks: props.tasks
  };
};

var endDrag = exports.endDrag = function endDrag(props, monitor) {
  if (endDragProps.groupId && (beginDragProps.groupId != endDragProps.groupId || beginDragProps.index != endDragProps.index)) {
    // We have done a real move, save
    props.moveCard({
      task: beginDragProps.id,
      destinationTask: endDragProps.id,
      destinationGroup: endDragProps.groupId,
      after: endDragProps.after,
      save: true
    });
  }
  props.endDrag(beginDragProps.id);
};

var emptyHover = exports.emptyHover = function emptyHover(props, monitor) {
  throttleModelUpdate(function () {

    endDragProps.id = undefined;
    endDragProps.index = 0;
    endDragProps.groupId = props.groupId;

    props.moveCard({
      task: monitor.getItem().id,
      destinationGroup: props.groupId
    });
  });
};