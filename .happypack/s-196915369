'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _index = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\redbox-react\\lib\\index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-catch-errors\\lib\\index.js');

var _index4 = _interopRequireDefault(_index3);

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index5 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-hmr\\lib\\index.js');

var _index6 = _interopRequireDefault(_index5);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _TaskTimelineItem = require('./TaskTimelineItem.css');

var _TaskTimelineItem2 = _interopRequireDefault(_TaskTimelineItem);

var _UserAvatar = require('app/renderer/main/components/Avatar/UserAvatar/UserAvatar.jsx');

var _UserAvatar2 = _interopRequireDefault(_UserAvatar);

var _Comment = require('app/renderer/main/modules/Comments/Comment/Comment.jsx');

var _Comment2 = _interopRequireDefault(_Comment);

var _TaskTimelineWrapper = require('../TaskTimelineWrapper/TaskTimelineWrapper.jsx');

var _TaskTimelineWrapper2 = _interopRequireDefault(_TaskTimelineWrapper);

var _TaskLabelDots = require('../../TaskLabelDots/TaskLabelDots.jsx');

var _TaskLabelDots2 = _interopRequireDefault(_TaskLabelDots);

var _reactRouter = require('react-router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Tasks/TaskTimeline/TaskTimelineItem/TaskTimelineItem.jsx',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Tasks/TaskTimeline/TaskTimelineItem/TaskTimelineItem.jsx',
  components: _components,
  locals: [],
  imports: [_react3.default, _index2.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2(_CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
  };
} // Component Core


// Styles


// import TaskTimelinePanel   from '../TaskTimelinePanel/TaskTimelinePanel.jsx'

var eventTextMap = {
  uncompleted: function uncompleted(item, board) {
    return _react3.default.createElement(
      'span',
      null,
      're-opened this task'
    );
  },
  addAsignee: function addAsignee(item, board) {
    return _react3.default.createElement(
      'span',
      null,
      'was assigned to this task'
    );
  },
  removeAsignee: function removeAsignee(item, board) {
    return _react3.default.createElement(
      'span',
      null,
      'was removed from assignees'
    );
  },
  commit: function commit(item, board) {
    if (item.commits && item.commits[0]) {
      var linkPath = {
        pathname: '/project/' + board.data.project + '/feed',
        query: { item: item.commits[0]._id }
      };
      return _react3.default.createElement(
        'span',
        null,
        'referenced this task in commit ',
        _react3.default.createElement(
          _reactRouter.Link,
          { to: linkPath, className: 'link-primary' },
          item.commits[0].summary
        )
      );
    } else return null;
  },
  completed: function completed(item, board) {
    if (item.commits && item.commits[0]) {
      var linkPath = {
        pathname: '/project/' + board.data.project + '/feed',
        query: { item: item.commits[0]._id }
      };
      return _react3.default.createElement(
        'span',
        null,
        'marked this as complete in commit ',
        _react3.default.createElement(
          _reactRouter.Link,
          { to: linkPath, className: 'link-primary' },
          item.commits[0].summary
        )
      );
    } else {
      return _react3.default.createElement(
        'span',
        null,
        'marked this as complete'
      );
    }
  },
  changedLabels: function changedLabels(item, board) {
    return _react3.default.createElement(
      'span',
      null,
      item.addedLabels && item.addedLabels.length > 0 ? _react3.default.createElement(
        'span',
        null,
        'added the ',
        _react3.default.createElement(_TaskLabelDots2.default, { labels: item.addedLabels, labelInfo: board.data.labels, tag: true }),
        ' ',
        item.addedLabels.length == 1 ? 'label' : 'labels'
      ) : null,
      item.addedLabels && item.removedLabels && item.addedLabels.length > 0 && item.removedLabels.length > 0 ? _react3.default.createElement(
        'span',
        null,
        ' and '
      ) : null,
      item.removedLabels && item.removedLabels.length > 0 ? _react3.default.createElement(
        'span',
        null,
        'removed the ',
        _react3.default.createElement(_TaskLabelDots2.default, { labels: item.removedLabels, labelInfo: board.data.labels, tag: true }),
        ' ',
        item.removedLabels.length == 1 ? 'label' : 'labels'
      ) : null
    );
  }
};

var getTextEventData = function getTextEventData(item, board) {
  return eventTextMap[item.event] ? eventTextMap[item.event](item, board) : _react3.default.createElement(
    'span',
    null,
    'Unknown Event Type'
  );
};

exports.default = _wrapComponent('_component')(_react3.default.createClass({
  render: function render() {
    var _props = this.props;
    var item = _props.item;
    var board = _props.board;
    // If it is a comment, we use the comment component to display

    if (item.event == 'comment') {
      return _react3.default.createElement(_Comment2.default, { commentId: item.comment });
    }
    //    if(item.event == 'completed' && item.commits && item.commits[0]){
    //      console.log(item);
    //      const commit = item.commits[0];
    //      return (
    //        <TaskTimelinePanel item={item}>
    //          <h3>{commit.summary}</h3>
    //          <div>{commit.description}</div>
    //        </TaskTimelinePanel>
    //      )
    //    }
    // Else, we add a text event
    else {
        return _react3.default.createElement(
          _TaskTimelineWrapper2.default,
          { style: { marginLeft: '85px' } },
          _react3.default.createElement(
            'div',
            { className: 'layout-row layout-align-start-center flex' },
            _react3.default.createElement(
              'div',
              { className: _TaskTimelineItem2.default.avatar },
              _react3.default.createElement(_UserAvatar2.default, { picture: item.user.picture, size: '25', shape: 'square' })
            ),
            _react3.default.createElement(
              'div',
              null,
              _react3.default.createElement(
                'b',
                null,
                item.user.name,
                ' '
              ),
              _react3.default.createElement(
                'span',
                { className: 'text-grey-3', style: { lineHeight: '1.5em' } },
                getTextEventData(item, board),
                ' - ',
                (0, _moment2.default)(item.timestamp).fromNow()
              )
            )
          )
        );
      }
  }
}));
module.exports = exports['default'];