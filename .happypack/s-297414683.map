{"version":3,"sources":["app\\renderer\\main\\modules\\Tasks\\TaskTimeline\\TaskTimeline.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AAGA;;IAAY,Y;;AACZ;;IAAY,e;;AAMZ;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAlBA;;;AAIA;;;AAIA;;;AAGA;;;AAIA;;;AAKA;;AAEA,IAAM,UAAU,SAAV,OAAU,CAAC,SAAD,EAAY,SAAZ,EAA0B;AACxC,MAAG,UAAU,MAAb,EAAoB;AAClB,QAAG,CAAC,SAAD,IAAc,UAAU,MAAV,KAAqB,UAAU,MAAhD,EAAuD;AACrD,gBAAU,YAAV,CAAuB,SAAvB,CAAiC,EAAC,QAAQ,UAAU,MAAnB,EAAjC;AACD;AACF;AACF,CAND;;AASO,IAAM,6DAAY,gBAAM,WAAN,CAAkB;AAAA;;;AAEzC;AACA,oBAHyC,gCAGpB;AAAE,YAAQ,KAAK,KAAb;AAAqB,GAHH;AAIzC,2BAJyC,qCAIf,SAJe,EAIJ;AAAE,YAAQ,SAAR,EAAmB,KAAK,KAAxB;AAA+B,GAJ7B;AAMzC,QANyC,oBAMhC;AAAA,iBACgC,KAAK,KADrC;AAAA,QACC,MADD,UACC,MADD;AAAA,QACS,WADT,UACS,WADT;AAAA,QACsB,KADtB,UACsB,KADtB;;;AAGP,QAAG,UAAU,OAAO,IAAjB,IAAyB,OAAO,IAAP,CAAY,MAAZ,GAAqB,CAAjD,EAAmD;AACjD,aAAO;AAAA;AAAA;AAAM,eAAO,IAAP,CAAY,GAAZ,CAAgB;AAAA,iBAAQ,4DAAkB,KAAK,KAAK,GAA5B,EAAiC,MAAM,IAAvC,EAA6C,OAAO,KAApD,GAAR;AAAA,SAAhB;AAAN,OAAP;AACD,KAFD,MAGI;AACH,aACE;AAAA;AAAA,UAAK,WAAU,sDAAf,EAAsE,OAAO,EAAC,QAAQ,MAAT,EAA7E;AACE,+CAAK,uBAAL,EAAoB,OAAO,EAAC,OAAO,MAAR,EAA3B,GADF;AAEE;AAAA;AAAA,YAAK,WAAU,cAAf,EAA8B,OAAO,EAAC,cAAc,MAAf,EAArC;AAAA;AAAA,SAFF;AAGE;AAAA;AAAA,YAAK,WAAU,cAAf;AAAA;AAAsE,mDAAtE;AAAA;AAAA;AAHF,OADF;AAOA;AACF;AArBwC,CAAlB,CAAZ,CAAN;;AAyBP;;AAEA,SAAS,eAAT,cAAuD;AAAA,MAA5B,KAA4B,QAA5B,KAA4B;AAAA,MAAjB,MAAiB,SAAjB,MAAiB;AAAA,MAAT,KAAS,SAAT,KAAS;;AACrD,SAAO;AACL,YAAQ,MAAM,MAAN,CAAa,MAAb,CADH;AAEL,mCAA6B,MAFxB;AAGL;AAHK,GAAP;AAKD;;AAED,SAAS,kBAAT,CAA4B,QAA5B,EAAsC;AACpC,SAAO;AACL,kBAAc,+BAAmB,YAAnB,EAAiC,QAAjC,CADT;AAEL,qBAAiB,+BAAmB,eAAnB,EAAoC,QAApC;AAFZ,GAAP;AAID;;kBAEc,yBAAQ,eAAR,EAAyB,kBAAzB,EAA6C,SAA7C,C","file":"TaskTimeline.jsx","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["// Container Core\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\n// Container Actions\nimport * as TasksActions from '../Tasks.actions.js';\nimport * as CommentsActions from 'app/renderer/main/modules/Comments/Comments.actions.js';\n\n// Component Core\nimport React from 'react';\n\n// Styles\nimport classNames from 'classnames';\nimport classes from './TaskTimeline.css';\n\n// Sub Components\nimport Comment from 'app/renderer/main/modules/Comments/Comment/Comment.jsx';\nimport TaskTimelineItem from './TaskTimelineItem/TaskTimelineItem.jsx';\nimport comments      from 'app/renderer/assets/images/pure-vectors/comments.svg';\n\n///////////////////////////////// COMPONENT /////////////////////////////////\n\nconst onMount = (nextProps, prevProps) => {\n  if(nextProps.taskId){\n    if(!prevProps || nextProps.taskId !== prevProps.taskId){\n      nextProps.tasksActions.getEvents({taskId: nextProps.taskId})\n    }\n  }\n}\n\n\nexport const Component = React.createClass({\n\n  // Mounting\n  componentWillMount() { onMount(this.props) },\n  componentWillReceiveProps(nextProps) { onMount(nextProps, this.props)},\n\n  render() {\n    const { events, entityModel, board } = this.props;\n\n    if(events && events.data && events.data.length > 0){\n      return <div>{events.data.map(item => <TaskTimelineItem key={item._id} item={item} board={board} /> )}</div>\n    }\n    else{\n     return (\n       <div className=\"layout-column layout-align-center-center text-center\" style={{height: '100%'}}>\n         <img src={comments} style={{width: '80px'}}/>\n         <div className=\"text-title-4\" style={{marginBottom: '10px'}}>Task timeline is empty</div>\n         <div className=\"text-title-5\">Items will appear here when you commit, <br/>modify or comment on this task.</div>\n       </div>\n      )\n    }\n  }\n});\n\n\n///////////////////////////////// CONTAINER /////////////////////////////////\n\nfunction mapStateToProps({ tasks }, { taskId, board }) {\n  return {\n    events: tasks.events[taskId],\n    entityModel: `tasks.events.${taskId}`,\n    board\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    tasksActions: bindActionCreators(TasksActions, dispatch),\n    commentsActions: bindActionCreators(CommentsActions, dispatch),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Component);\n"]}