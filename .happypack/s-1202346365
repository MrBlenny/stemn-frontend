'use strict';

var start = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    var initialState, store, history;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return jsonStorage.get('sessionState');

          case 2:
            initialState = _context.sent;
            store = (0, _configureStoreRenderer2.default)(initialState);
            history = (0, _reactRouterRedux.syncHistoryWithStore)(_reactRouter.hashHistory, store);

            _electron.ipcRenderer.on('redux-action', function (event, payload) {
              store.dispatch(payload);
            });

            (0, _reactDom.render)(_react2.default.createElement(
              _reactRedux.Provider,
              { store: store },
              _react2.default.createElement(_reactRouter.Router, { history: history, routes: (0, _routes2.default)(store) })
            ), document.getElementById('root'));

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function start() {
    return _ref.apply(this, arguments);
  };
}();

require('../shared/init.js');

var _electron = require('electron');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactRedux = require('react-redux');

var _reactRouter = require('react-router');

var _reactRouterRedux = require('react-router-redux');

var _configureStoreRenderer = require('../../shared/store/configureStore.renderer.js');

var _configureStoreRenderer2 = _interopRequireDefault(_configureStoreRenderer);

var _routes = require('./routes');

var _routes2 = _interopRequireDefault(_routes);

var _pify = require('pify');

var _pify2 = _interopRequireDefault(_pify);

var _electronJsonStorage = require('electron-json-storage');

var _electronJsonStorage2 = _interopRequireDefault(_electronJsonStorage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

var jsonStorage = (0, _pify2.default)(_electronJsonStorage2.default);

start();

//import '../shared/init.js';
//import { ipcRenderer, remote } from 'electron';
//import React from 'react';
//import { render } from 'react-dom';
//import { Provider } from 'react-redux';
//import { Router, hashHistory } from 'react-router';
//import { syncHistoryWithStore } from 'react-router-redux';
//import configureStore from '../../shared/store/configureStore.renderer.js';
//import getRoutes from './routes';
//
//const initialState = JSON.parse(JSON.stringify(remote.getGlobal('state')));
//const store   = configureStore(initialState);
//const history = syncHistoryWithStore(hashHistory, store);
//
//ipcRenderer.on('redux-action', (event, payload) => {
//  store.dispatch(payload);
//});
//
//render(
//  <Provider store={store}>
//    <Router history={history} routes={getRoutes(store)} />
//  </Provider>,
//  document.getElementById('root')
//);