{"version":3,"sources":["app\\shared\\helpers\\stringConcat.js"],"names":[],"mappings":";;;;;AAAO,IAAM,oBAAM,SAAN,GAAM,CAAC,MAAD,EAAS,KAAT,EAAmB;AACpC,SAAO,OAAO,MAAP,IAAiB,KAAjB,GAAyB,OAAO,SAAP,CAAiB,CAAjB,EAAoB,KAApB,IAA2B,KAApD,GAA4D,MAAnE;AACD,CAFM;;AAIP;AACO,IAAM,0BAAS,SAAT,MAAS,CAAC,MAAD,EAAS,KAAT,EAAgB,KAAhB,EAA0B;AAC9C,UAAQ,SAAS,GAAjB;;AAEA;AACA,MAAM,UAAY,cAAc,MAAd,CAAlB;AACA,MAAM,aAAa,QAAS,QAAQ,KAAjB,EAAwB,OAAxB,CAAnB;AACA,MAAM,WAAa,QAAS,OAAO,MAAP,GAAgB,SAAS,IAAE,KAAX,CAAzB,EAA4C,OAA5C,CAAnB;;AAEA,MAAI,OAAO,MAAP,GAAgB,QAAQ,KAA5B,EAAmC;AACjC,WAAO,OAAO,MAAP,CAAc,CAAd,EAAiB,UAAjB,IAA+B,MAA/B,GAAwC,OAAO,MAAP,CAAc,QAAd,EAAwB,OAAO,MAA/B,CAA/C;AACD;AACD,SAAO,MAAP;AACD,CAZM;AAaP,SAAS,OAAT,CAAkB,GAAlB,EAAuB,GAAvB,EAA4B;AAC1B,MAAI,OAAO,IAAI,CAAJ,CAAX;AACA,MAAI,OAAO,KAAK,GAAL,CAAU,MAAM,IAAhB,CAAX;AACA,OAAK,IAAI,MAAM,CAAf,EAAkB,MAAM,IAAI,MAA5B,EAAoC,KAApC,EAA2C;AACzC,QAAI,UAAU,KAAK,GAAL,CAAU,MAAM,IAAI,GAAJ,CAAhB,CAAd;AACA,QAAI,UAAU,IAAd,EAAoB;AAClB,aAAO,OAAP;AACA,aAAO,IAAI,GAAJ,CAAP;AACD;AACF;AACD,SAAO,IAAP;AACD;;AAED,SAAS,aAAT,CAAwB,MAAxB,EAA+B;AAC7B,SAAO,OAAO,KAAP,CAAa,EAAb,EAAiB,GAAjB,CAAqB;AAAA,WAAU,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,QAAhB,CAAyB,MAAzB,CAAV;AAAA,GAArB,CAAP;AACD","file":"stringConcat.js","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["export const end = (string, chars) => {\n  return string.length >= chars ? string.substring(0, chars)+'...' : string\n}\n\n// This will concat a string in the middle (or the position described by the ratio)\nexport const middle = (string, chars, ratio) => {\n  ratio = ratio || 0.5;\n\n  // Get all the spaces in the string\n  const indices   = getWordBreaks(string);\n  const startIndex = closest( chars * ratio, indices);\n  const endIndex   = closest( string.length - chars * (1-ratio), indices)\n\n  if (string.length > chars * ratio) {\n    return string.substr(0, startIndex) + ' ...' + string.substr(endIndex, string.length);\n  }\n  return string;\n}\nfunction closest (num, arr) {\n  var curr = arr[0];\n  var diff = Math.abs (num - curr);\n  for (var val = 0; val < arr.length; val++) {\n    var newdiff = Math.abs (num - arr[val]);\n    if (newdiff < diff) {\n      diff = newdiff;\n      curr = arr[val];\n    }\n  }\n  return curr;\n}\n\nfunction getWordBreaks (string){\n  return string.split('').map(letter => [' ', '/', '-'].includes(letter))\n}\n"]}