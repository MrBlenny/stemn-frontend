{"version":3,"sources":["app\\renderer\\main\\modules\\Timeline\\TimelineInner\\TimelineInner.jsx"],"names":[],"mappings":"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","file":"TimelineInner.jsx","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["import React from 'react';\n\n// Styles\nimport classNames from 'classnames';\nimport classes from './TimelineInner.css';\n\nimport moment from 'moment';\nimport Popover from 'app/renderer/assets/other/react-popup';\nimport PopoverMenu from 'app/renderer/main/components/PopoverMenu/PopoverMenu';\n\nimport * as stringConcat from 'app/shared/helpers/stringConcat';\n\n\nconst EventMap = {\n  commit   : (item) => {\n    const timeFromNow = moment(item.timestamp).fromNow();\n    return (\n      <div className={classes.popup + ' layout-row layout-align-start-center'}>\n        <img className={classes.popupImage} src={'https://stemn.com' + item.user.picture + '?size=thumb&crop=true'} />\n        <div className=\"flex\">\n          <b>{stringConcat.end(item.data.summary, 30)}</b>\n          <div>{timeFromNow} by {item.user.name}</div>\n        </div>\n      </div>\n    )\n  },\n  revision : (item) => {\n    const timeFromNow = moment(item.timestamp).fromNow();\n    return (\n      <div className={classes.popup + ' layout-row layout-align-start-center'}>\n        <img className={classes.popupImage} src={'https://stemn.com' + item.user.picture + '?size=thumb&crop=true'} />\n        <div className=\"flex\">\n          <b>{stringConcat.end(item.data.name, 30)}</b>\n          <div>{timeFromNow} by {item.user.name}</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst PopupContent = (item) =>{\n  const PopupInner = EventMap[item.event];\n  return PopupInner ? PopupInner(item) : 'Unknown event type';\n}\n\nconst Component = React.createClass({\n  render() {\n    const { numberToShow, items, selected, isSelected, page, onSelect, preferPlace, size} = this.props;\n    const translation = 'translateX(' + page * 100 + '%)';\n    const Items = items.map((item, index)=> {\n      const percentage = 100 - (index) * (100 / numberToShow);\n      const posStyle = {left: percentage+'%'};\n      return (\n        <a key={item._id}\n          // If the isSelected function is provided, we use this to determine if the item is active\n          className={classNames(classes.dot, {[classes.active]: isSelected ? isSelected(item) : selected == item._id})}\n          style={posStyle}\n          onClick={()=>onSelect(item)}>\n          <PopoverMenu preferPlace={preferPlace || 'below'} trigger=\"hover\">\n            <div style={{width: '100%', height: '100%'}}></div>\n            <div>{PopupContent(item)}</div>\n          </PopoverMenu>\n        </a>\n      )\n    });\n\n    return(\n      <div className={classNames(classes.dots, {[classes.small]: size == 'sm'})} style={{transform: translation}}>\n        {Items}\n      </div>\n    )\n  }\n});\n\nexport default Component\n"]}