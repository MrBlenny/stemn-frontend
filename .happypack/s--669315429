'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = undefined;

var _index = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\redbox-react\\lib\\index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-catch-errors\\lib\\index.js');

var _index4 = _interopRequireDefault(_index3);

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index5 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-hmr\\lib\\index.js');

var _index6 = _interopRequireDefault(_index5);

var _reactRedux = require('react-redux');

var _getUuid = require('app/shared/helpers/getUuid.js');

var _getUuid2 = _interopRequireDefault(_getUuid);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _TaskLabelsEdit = require('./TaskLabelsEdit.css');

var _TaskLabelsEdit2 = _interopRequireDefault(_TaskLabelsEdit);

var _reactReduxForm = require('react-redux-form');

var _ModalActions = require('app/renderer/main/modules/Modal/Modal.actions.js');

var ModalActions = _interopRequireWildcard(_ModalActions);

var _PopoverMenu = require('app/renderer/main/components/PopoverMenu/PopoverMenu');

var _PopoverMenu2 = _interopRequireDefault(_PopoverMenu);

var _Input = require('app/renderer/main/components/Input/Input/Input');

var _Input2 = _interopRequireDefault(_Input);

var _SimpleIconButton = require('app/renderer/main/components/Buttons/SimpleIconButton/SimpleIconButton');

var _SimpleIconButton2 = _interopRequireDefault(_SimpleIconButton);

var _moreHoriz = require('react-icons/md/more-horiz');

var _moreHoriz2 = _interopRequireDefault(_moreHoriz);

var _ColorSelect = require('./ColorSelect/ColorSelect.jsx');

var _ColorSelect2 = _interopRequireDefault(_ColorSelect);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Tasks/TaskLabelsEdit/TaskLabelsEdit.jsx',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Tasks/TaskLabelsEdit/TaskLabelsEdit.jsx',
  components: _components,
  locals: [],
  imports: [_react3.default, _index2.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2(_CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
  };
} // Component Core


// Styles


// Actions


var Component = exports.Component = _wrapComponent('_component')(_react3.default.createClass({
  displayName: 'Component',
  confirmDelete: function confirmDelete(model, index) {
    this.props.dispatch(ModalActions.showConfirm({
      message: 'If you delete a label it will be removed from all existing tasks.',
      modalConfirm: {
        functionAlias: 'FormActions.remove',
        functionInputs: [model, index]
      }
    }));
  },
  render: function render() {
    var _this = this;

    var _props = this.props;
    var model = _props.model;
    var value = _props.value;
    var dispatch = _props.dispatch;

    // If it is empty, push on a label

    if (value.length == 0) {
      dispatch(_reactReduxForm.actions.push(model, {
        _id: (0, _getUuid2.default)(),
        color: '',
        name: ''
      }));
    }
    // Else, if the name of the last label exists, add another
    else if (value[value.length - 1].name.length >= 1) {
        dispatch(_reactReduxForm.actions.push(model, {
          _id: (0, _getUuid2.default)(),
          color: '',
          name: ''
        }));
      }

    return _react3.default.createElement(
      'div',
      null,
      value.map(function (label, index) {
        return _react3.default.createElement(
          'div',
          { key: label._id, className: _TaskLabelsEdit2.default.row + ' layout-row layout-align-start-center' },
          _react3.default.createElement(
            'div',
            { className: _TaskLabelsEdit2.default.colorSelect },
            _react3.default.createElement(
              _PopoverMenu2.default,
              { preferPlace: 'above' },
              _react3.default.createElement('label', { htmlFor: label._id, className: _TaskLabelsEdit2.default.swatch, style: { background: label.color } }),
              _react3.default.createElement(_ColorSelect2.default, {
                model: model + '[' + index + '].color',
                value: label.color
              })
            ),
            _react3.default.createElement(_Input2.default, {
              model: model + '[' + index + '].color',
              value: label.color,
              className: _TaskLabelsEdit2.default.colorSelectInput + ' dr-input',
              type: 'text',
              placeholder: 'Color Code',
              id: label._id
            })
          ),
          _react3.default.createElement(
            'div',
            { className: _TaskLabelsEdit2.default.name + ' flex' },
            _react3.default.createElement(_Input2.default, {
              model: model + '[' + index + '].name',
              value: label.name,
              className: 'dr-input',
              type: 'text',
              placeholder: 'Label Name'
            })
          ),
          _react3.default.createElement(
            _PopoverMenu2.default,
            { preferPlace: 'right' },
            _react3.default.createElement(
              _SimpleIconButton2.default,
              null,
              _react3.default.createElement(_moreHoriz2.default, { size: '20px' })
            ),
            _react3.default.createElement(
              'div',
              { className: 'PopoverMenu' },
              _react3.default.createElement(
                'a',
                { onClick: function onClick() {
                    return _this.confirmDelete(model, index);
                  } },
                'Remove Label'
              )
            )
          )
        );
      })
    );
  }
}));

exports.default = (0, _reactRedux.connect)()(Component);