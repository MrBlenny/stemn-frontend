'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = function () {
  var state = arguments.length <= 0 || arguments[0] === undefined ? initialState : arguments[0];
  var action = arguments[1];

  if (!state.hydrated) {
    state = _extends({}, initialState, state, { hydrated: true });
  }
  return (0, _reactReduxForm.modeled)(mainReducer, 'auth')(state, action);
};

var _reactReduxForm = require('react-redux-form');

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialState = {
  authLoading: false,
  userLoading: false,
  authToken: null,

  projects: {
    loading: false,
    data: null
  },

  user: {},
  login: {
    email: '',
    password: '',
    firstname: '',
    lastname: ''
  }
};

var mainReducer = function mainReducer(state, action) {
  switch (action.type) {
    case 'AUTH/LOAD_USER_DATA_PENDING':
      return _extends({}, state, {
        userLoading: true
      });
    case 'AUTH/LOAD_USER_DATA_FULFILLED':
      return _extends({}, state, {
        userLoading: false,
        user: action.payload.data
      });
    case 'AUTH/LOAD_USER_DATA_REJECTED':
      return _extends({}, state, {
        userLoading: false
      });

    case 'AUTH/SET_AUTH_TOKEN':
      return _extends({}, state, {
        authToken: action.payload
      });
    case 'AUTH/REMOVE_AUTH_TOKEN':
      return _extends({}, state, {
        authToken: null
      });

    case 'AUTH/INIT_HTTP_HEADER':
      _axios2.default.defaults.headers.common['Authorization'] = action.payload.fullToken;
      return _extends({}, state);
    case 'AUTH/REMOVE_HTTP_HEADER':
      delete _axios2.default.defaults.headers.common['Authorization'];
      return _extends({}, state);

    case 'AUTH/AUTHENTICATE_PENDING':
      return _extends({}, state, {
        authLoading: true
      });
    case 'AUTH/AUTHENTICATE_FULFILLED':
      return _extends({}, state, {
        authLoading: false
      });
    case 'AUTH/AUTHENTICATE_REJECTED':
      return _extends({}, state, {
        authLoading: false
      });

    case 'AUTH/UNLINK_FULFILLED':
      return i.merge(state, {
        user: { accounts: action.payload.data }
      });

    case 'AUTH/LOGIN_PENDING':
      return _extends({}, state, {
        authLoading: true
      });
    case 'AUTH/LOGIN_FULFILLED':
      return _extends({}, state, {
        authLoading: false
      });
    case 'AUTH/LOGIN_REJECTED':
      return _extends({}, state, {
        authLoading: false
      });

    case 'AUTH/REGISTER_PENDING':
      return _extends({}, state, {
        authLoading: true
      });
    case 'AUTH/REGISTER_FULFILLED':
      return _extends({}, state, {
        authLoading: false
      });
    case 'AUTH/REGISTER_REJECTED':
      return _extends({}, state, {
        authLoading: false
      });

    case 'AUTH/LOGOUT':
      return _extends({}, state, {
        authLoading: false
      });
    case 'AUTH/CLEAR_USER_DATA':
      return _extends({}, state, {
        user: {}
      });
    default:
      return state;
  }
};

module.exports = exports['default'];