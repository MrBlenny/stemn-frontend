'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = undefined;

var _index = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\redbox-react\\lib\\index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-catch-errors\\lib\\index.js');

var _index4 = _interopRequireDefault(_index3);

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index5 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-hmr\\lib\\index.js');

var _index6 = _interopRequireDefault(_index5);

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _ChangesActions = require('app/renderer/main/modules/Changes/Changes.actions.js');

var ChangesActions = _interopRequireWildcard(_ChangesActions);

var _projects = require('app/shared/actions/projects.js');

var ProjectsActions = _interopRequireWildcard(_projects);

var _lodash = require('lodash');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _LoadingOverlay = require('app/renderer/main/components/Loading/LoadingOverlay/LoadingOverlay.jsx');

var _LoadingOverlay2 = _interopRequireDefault(_LoadingOverlay);

var _CommitChanges = require('app/renderer/main/modules/Changes/CommitChanges/CommitChanges.jsx');

var _CommitChanges2 = _interopRequireDefault(_CommitChanges);

var _CommitBox = require('app/renderer/main/modules/Changes/CommitBox/CommitBox.jsx');

var _CommitBox2 = _interopRequireDefault(_CommitBox);

var _Toolbar = require('app/renderer/menubar/modules/Toolbar/Toolbar.jsx');

var _Toolbar2 = _interopRequireDefault(_Toolbar);

var _openInNew = require('react-icons/md/open-in-new');

var _openInNew2 = _interopRequireDefault(_openInNew);

var _window = require('app/shared/electronActions/window.js');

var ElectronWindowActions = _interopRequireWildcard(_window);

var _reactRouter = require('react-router');

var _cloudLocked = require('app/renderer/assets/images/pure-vectors/cloud-locked.svg');

var _cloudLocked2 = _interopRequireDefault(_cloudLocked);

var _stringConcat = require('app/shared/helpers/stringConcat');

var stringConcat = _interopRequireWildcard(_stringConcat);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/menubar/pages/ProjectPage/ProjectPage.jsx',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/menubar/pages/ProjectPage/ProjectPage.jsx',
  components: _components,
  locals: [],
  imports: [_react3.default, _index2.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2(_CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
  };
} // Container Core


// Container Actions


// Component Core

// Styles


// Sub Components


var Component = exports.Component = _wrapComponent('_component')(_react3.default.createClass({
  displayName: 'Component',
  onMount: function onMount(nextProps, prevProps) {
    // If project has changed
    if (!prevProps || nextProps.projectId != prevProps.projectId) {
      // Set the project to active
      nextProps.projectsActions.setActiveProject({ projectId: nextProps.projectId });
      // If project is connected
      if ((0, _lodash.has)(nextProps, 'project.data.remote.connected')) {
        nextProps.changesActions.fetchChanges({ projectId: nextProps.projectId });
      }
    }
  },
  componentWillMount: function componentWillMount() {
    this.onMount(this.props);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this.onMount(nextProps, this.props);
  },
  refresh: function refresh() {
    this.props.changesActions.fetchChanges({
      projectId: this.props.project.data._id
    });
  },
  toggleAll: function toggleAll(value) {
    return this.props.changesActions.toggleAll({
      value: value,
      projectId: this.props.project.data._id
    });
  },
  commitFn: function commitFn() {
    this.props.changesActions.commit({
      projectId: this.props.project.data._id,
      summary: this.props.changes.summary,
      description: this.props.changes.description
    });
  },
  deselect: function deselect() {
    this.props.changesActions.deselect({
      projectId: this.props.project.data._id
    });
  },
  render: function render() {
    var _this = this;

    var _props = this.props;
    var changes = _props.changes;
    var project = _props.project;
    var changesActions = _props.changesActions;
    var entityModel = _props.entityModel;
    var projectId = _props.projectId;


    var addStoreLink = {
      pathname: '/project/' + projectId + '/settings',
      state: { meta: { scope: ['main'] } }
    };

    var projectNotConnected = function projectNotConnected() {
      return _react3.default.createElement(
        'div',
        { className: 'layout-column layout-align-center-center flex' },
        _react3.default.createElement('img', { src: _cloudLocked2.default }),
        _react3.default.createElement(
          'div',
          { className: 'text-title-5 text-center' },
          'Project not connected to a file store'
        ),
        _react3.default.createElement(
          'div',
          { className: 'text-title-5 text-center link-primary', style: { marginTop: '10px' } },
          _react3.default.createElement(
            _reactRouter.Link,
            { to: addStoreLink },
            'Add File Store'
          )
        )
      );
    };

    var getInnerContent = function getInnerContent() {
      if (project && project.data.remote.connected) {
        return getChangesAndBox();
      } else {
        return projectNotConnected();
      }
    };

    var getChangesAndBox = function getChangesAndBox() {
      if (changes && changes.data) {
        var commitBoxStyles = changes.summary && changes.summary.length > 0 ? {
          height: '200px',
          borderTop: '1px solid rgba(0, 0, 0, 0.1)',
          background: 'rgba(0, 0, 0, 0.03)',
          transition: 'height 0.3s ease'
        } : {
          height: '60px',
          borderTop: '1px solid rgba(0, 0, 0, 0.1)',
          background: 'rgba(0, 0, 0, 0.03)',
          transition: 'height 0.3s ease'
        };
        return _react3.default.createElement(
          'div',
          { className: 'layout-column flex' },
          _react3.default.createElement(_CommitChanges2.default, {
            changes: changes,
            project: project.data,
            toggleAll: _this.toggleAll,
            selectedFileChange: changesActions.selectedFileChange,
            deselect: _this.deselect,
            refresh: _this.refresh }),
          _react3.default.createElement(
            'div',
            { style: commitBoxStyles },
            _react3.default.createElement(_CommitBox2.default, {
              entityModel: entityModel,
              changes: changes,
              changesActions: changesActions,
              commitFn: function commitFn() {
                return _this.commitFn();
              },
              project: project.data })
          )
        );
      }
    };

    return _react3.default.createElement(
      'div',
      { className: 'layout-column flex' },
      _react3.default.createElement(
        _Toolbar2.default,
        { menu: true },
        _react3.default.createElement(
          'div',
          { className: 'flex' },
          project && project.data && project.data.name ? stringConcat.end(project.data.name, 28) : ''
        ),
        _react3.default.createElement(_openInNew2.default, { onClick: function onClick() {
            return ElectronWindowActions.windowMainOpen();
          }, size: '22' })
      ),
      getInnerContent(),
      _react3.default.createElement(_LoadingOverlay2.default, { show: project && project.loading })
    );
  }
}));

///////////////////////////////// CONTAINER /////////////////////////////////

function mapStateToProps(_ref, _ref2) {
  var changes = _ref.changes;
  var projects = _ref.projects;
  var params = _ref2.params;

  var project = projects.data[params.stub];
  return {
    projectId: params.stub,
    project: project,
    changes: changes[params.stub],
    entityModel: 'changes.' + params.stub
  };
}

function mapDispatchToProps(dispatch) {
  return {
    changesActions: (0, _redux.bindActionCreators)(ChangesActions, dispatch),
    projectsActions: (0, _redux.bindActionCreators)(ProjectsActions, dispatch)
  };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Component);