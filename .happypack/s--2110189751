'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _index = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\redbox-react\\lib\\index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-catch-errors\\lib\\index.js');

var _index4 = _interopRequireDefault(_index3);

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index5 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-hmr\\lib\\index.js');

var _index6 = _interopRequireDefault(_index5);

var _reactClickdrag = require('react-clickdrag');

var _reactClickdrag2 = _interopRequireDefault(_reactClickdrag);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _DragResize = require('./DragResize.css');

var _DragResize2 = _interopRequireDefault(_DragResize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {},
  _component2: {}
};

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/DragResize/DragResize.jsx',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/DragResize/DragResize.jsx',
  components: _components,
  locals: [],
  imports: [_react3.default, _index2.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2(_CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
  };
}

// Styles


var DraggerComponent = _wrapComponent('_component')(_react3.default.createClass({
  displayName: 'DraggerComponent',
  getInitialState: function getInitialState() {
    return {
      lastEventId: null,
      active: false
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.dataDrag.isMoving && nextProps.dataDrag.id && nextProps.dataDrag.id != this.state.lastEventId) {
      this.setState({ active: true, lastEventId: nextProps.dataDrag.id });
      if (nextProps.side == 'left' || nextProps.side == 'right') {
        this.props.changeFn({
          deltaX: nextProps.side == 'right' ? nextProps.dataDrag.deltaX : -nextProps.dataDrag.deltaX
        });
      } else {
        this.props.changeFn({
          deltaY: nextProps.side == 'bottom' ? nextProps.dataDrag.deltaY : -nextProps.dataDrag.deltaY
        });
      }
    } else {
      this.setState({ active: false });
    }
  },
  render: function render() {
    var styles = {
      right: {
        width: '6px',
        top: '0',
        bottom: '0',
        right: '0',
        marginRight: '-6px',
        cursor: 'col-resize'
      },
      left: {
        width: '6px',
        top: '0',
        bottom: '0',
        left: '0',
        marginLeft: '-6px',
        cursor: 'col-resize'
      },
      bottom: {
        height: '6px',
        bottom: '0',
        right: '0',
        left: '0',
        marginBottom: '0px',
        cursor: 'row-resize'
      },
      top: {
        height: '6px',
        top: '0',
        right: '0',
        left: '0',
        marginTop: '-3px',
        cursor: 'row-resize'
      }
    };

    return _react3.default.createElement('div', { className: _DragResize2.default.dragger, style: styles[this.props.side] });
  }
}));

var Dragger = (0, _reactClickdrag2.default)(DraggerComponent, { touch: true });

exports.default = _wrapComponent('_component2')(_react3.default.createClass({
  getInitialState: function getInitialState() {
    if (this.props.width) {
      return { width: parseInt(this.props.width) };
    } else if (this.props.height) {
      return { height: parseInt(this.props.height) };
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var _this = this;

    if (nextProps.animateHide != this.props.animateHide) {
      if (nextProps.width) {
        this.setState({ width: nextProps.animateHide ? '0' : nextProps.width, animate: true });
      } else {
        this.setState({ height: nextProps.animateHide ? '0' : nextProps.height, animate: true });
      }
      setTimeout(function () {
        return _this.setState({ animate: false });
      }, 300);
    }
  },
  drag: function drag(change) {
    var _props = this.props;
    var widthRange = _props.widthRange;
    var heightRange = _props.heightRange;

    if (change.deltaX) {
      var width = parseInt(this.state.width) + change.deltaX;
      if (widthRange) {
        if (width < widthRange[0]) {
          width = widthRange[0];
        } else if (width > widthRange[1]) {
          width = widthRange[1];
        }
      }
      this.setState({ width: width });
    } else if (change.deltaY) {
      var height = parseInt(this.state.height) + change.deltaY;
      if (heightRange) {
        if (height < heightRange[0]) {
          height = heightRange[0];
        } else if (height > heightRange[1]) {
          height = heightRange[1];
        }
      }
      this.setState({ height: height });
    }
  },
  render: function render() {
    var style = {
      width: this.state.width + 'px',
      height: this.state.height + 'px',
      transition: this.state.animate ? '0.3s ease all' : 'none'
    };
    return _react3.default.createElement(
      'div',
      { style: style, className: (0, _classnames2.default)(_DragResize2.default.box, this.props.className) },
      this.props.children,
      _react3.default.createElement(Dragger, { changeFn: this.drag, side: this.props.side })
    );
  }
}));
module.exports = exports['default'];