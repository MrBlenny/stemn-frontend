'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFunction = exports.addModule = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _projects = require('../../actions/projects.js');

var ProjectsActions = _interopRequireWildcard(_projects);

var _TasksActions = require('../../../renderer/main/modules/Tasks/Tasks.actions.js');

var TasksActions = _interopRequireWildcard(_TasksActions);

var _ChangesActions = require('../../../renderer/main/modules/Changes/Changes.actions.js');

var ChangesActions = _interopRequireWildcard(_ChangesActions);

var _CommentsActions = require('../../../renderer/main/modules/Comments/Comments.actions.js');

var CommentsActions = _interopRequireWildcard(_CommentsActions);

var _reactReduxForm = require('react-redux-form');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var library = {
  ProjectsActions: ProjectsActions,
  TasksActions: TasksActions,
  ChangesActions: ChangesActions,
  CommentsActions: CommentsActions,
  FormActions: _reactReduxForm.actions
};

var addModule = exports.addModule = function addModule(moduleName, functions) {
  library[moduleName] = functions;
};

var getFunction = exports.getFunction = function getFunction(path) {
  var _path$split = path.split('.');

  var _path$split2 = _slicedToArray(_path$split, 2);

  var moduleName = _path$split2[0];
  var functionName = _path$split2[1];

  // We are getting the module only

  if (!functionName) {
    if (library[moduleName]) {
      return library[moduleName];
    } else {
      console.error('Module: ' + moduleName + ' could not be found.');
    }
  }
  // We are getting a function
  else {
      if (library[moduleName] && library[moduleName][functionName]) {
        return library[moduleName][functionName];
      } else {
        console.error('Function: ' + moduleName + '.' + functionName + ' could not be found.');
      }
    }
};