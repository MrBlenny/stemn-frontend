'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _index = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\redbox-react\\lib\\index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-catch-errors\\lib\\index.js');

var _index4 = _interopRequireDefault(_index3);

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index5 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-hmr\\lib\\index.js');

var _index6 = _interopRequireDefault(_index5);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _dec2, _class, _class2, _temp;

var _reactDnd = require('react-dnd');

var _reactDom = require('react-dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  Card: {
    displayName: 'Card'
  }
};

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Tasks/TaskList/TaskGroup/TaskGroupWrapped.jsx',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Tasks/TaskList/TaskGroup/TaskGroupWrapped.jsx',
  components: _components,
  locals: [],
  imports: [_react3.default, _index2.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2(_CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
  };
}

var ItemTypes = {
  GROUP: 'group'
};

var endDragProps = {};
var beginDragProps = {};

var cardSource = {
  beginDrag: function beginDrag(props) {
    beginDragProps.id = props.id;
    beginDragProps.index = props.index;
    return {
      id: props.id,
      index: props.index
    };
  },
  endDrag: function endDrag(props) {
    // If the group has moved, save it
    if (beginDragProps.index != endDragProps.index) {
      props.moveGroup({
        group: beginDragProps.id,
        destinationGroup: endDragProps.id,
        after: endDragProps.after,
        save: true
      });
    }
  }
};

var cardTarget = {
  hover: function hover(props, monitor, component) {
    var dragIndex = monitor.getItem().index;
    var hoverIndex = props.index;
    // Don't replace items with themselves
    if (dragIndex === hoverIndex) {
      return;
    }
    // Determine rectangle on screen
    var hoverBoundingRect = (0, _reactDom.findDOMNode)(component).getBoundingClientRect();
    var clientOffset = monitor.getClientOffset(); // Determine mouse position

    if (props.layout == 'list') {
      var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Get vertical middle
      var hoverClientY = clientOffset.y - hoverBoundingRect.top; // Get pixels to the top
      // Only perform the move when the mouse has crossed half of the items height
      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {
        return;
      } // Dragging down
      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {
        return;
      } // Dragging upwards
    }
    // Else this is a board (horizontal drag)
    else {
        var hoverMiddleX = (hoverBoundingRect.right - hoverBoundingRect.left) / 2;
        var hoverClientX = clientOffset.x - hoverBoundingRect.left; // Get pixels to the left
        // Only perform the move when the mouse has crossed half of the items height
        if (dragIndex < hoverIndex && hoverClientX < hoverMiddleX) {
          return;
        } // Dragging left
        if (dragIndex > hoverIndex && hoverClientX > hoverMiddleX) {
          return;
        } // Dragging right
      }

    // Set the end params
    endDragProps.id = props.id;
    endDragProps.index = props.index;
    // If the dragged item index is less than the destination index, we set it to after
    var dragIndexInGroup = props.groups.findIndex(function (groupId) {
      return groupId == beginDragProps.id;
    });
    endDragProps.after = dragIndexInGroup != -1 ? dragIndexInGroup < endDragProps.index : false;

    // Time to actually perform the action
    props.moveGroup({
      group: monitor.getItem().id,
      destinationGroup: props.id
    });
    monitor.getItem().index = hoverIndex;
  }
};

var Card = _wrapComponent('Card')((_dec = (0, _reactDnd.DropTarget)(ItemTypes.GROUP, cardTarget, function (connect) {
  return {
    connectDropTarget: connect.dropTarget()
  };
}), _dec2 = (0, _reactDnd.DragSource)(ItemTypes.GROUP, cardSource, function (connect, monitor) {
  return {
    connectDragSource: connect.dragSource(),
    isDragging: monitor.isDragging()
  };
}), _dec(_class = _dec2(_class = (_temp = _class2 = function (_Component) {
  _inherits(Card, _Component);

  function Card() {
    _classCallCheck(this, Card);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Card).apply(this, arguments));
  }

  _createClass(Card, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var item = _props.item;
      var isDragging = _props.isDragging;
      var connectDragSource = _props.connectDragSource;
      var connectDropTarget = _props.connectDropTarget;
      var children = _props.children;
      var id = _props.id;

      var outerStyles = isDragging ? { opacity: '0.5' } : { opacity: '1', transform: 'translate3d(0,0,0)' };
      return connectDragSource(connectDropTarget(_react3.default.createElement(
        'div',
        { style: outerStyles, key: id },
        children
      )));
    }
  }]);

  return Card;
}(_react2.Component), _class2.propTypes = {
  connectDragSource: _react2.PropTypes.func.isRequired,
  connectDropTarget: _react2.PropTypes.func.isRequired,
  index: _react2.PropTypes.number.isRequired,
  isDragging: _react2.PropTypes.bool.isRequired,
  item: _react2.PropTypes.object.isRequired,
  moveGroup: _react2.PropTypes.func.isRequired,
  layout: _react2.PropTypes.string.isRequired // Required to determine drag direction, horizontal or veritcal
}, _temp)) || _class) || _class));

exports.default = Card;
module.exports = exports['default'];