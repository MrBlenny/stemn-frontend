{"version":3,"sources":["app\\renderer\\main\\modules\\Comments\\Comments.actions.js"],"names":[],"mappings":"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","file":"Comments.actions.js","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["import http from 'axios';\nimport * as TasksActions from '../Tasks/Tasks.actions.js';\n\nexport function getComment({commentId}) {\n  return {\n    type: 'COMMENTS/GET_COMMENT',\n    httpPackage: {\n      endpoint: 'api/v1/comments',\n      url: `/api/v1/comments`,\n      method: 'GET',\n      params: {\n        'ids' : commentId\n      }\n    },\n    meta: {\n      commentId\n    },\n  }\n}\n\nexport function newComment({comment}) {\n  return (dispatch) => {\n    if(comment && comment.body && comment.body.length > 0){\n      dispatch({\n        type: 'COMMENTS/NEW_COMMENT',\n        payload: http({\n          url: `/api/v1/tasks/${comment.task}/comments`,\n          method: 'POST',\n          data: comment\n        }),\n        meta: {\n          taskId: comment.task\n        }\n      }).then(response => {\n        dispatch(TasksActions.newEvent({\n          taskId: comment.task,\n          event: {\n            event: 'comment',\n            comment: response.value.data._id\n          }\n        }))\n      })\n    }\n  }\n}\n\nexport function toggleReaction({commentId, reactionType}) {\n  return (dispatch, getState) => {\n    const reactions = getState().comments.data[commentId].data.reactions;\n    const userId = getState().auth.user._id;\n    const reactionExists = reactions.find(reaction => reaction.owner._id == userId && reaction.type == reactionType);\n\n    if(reactionExists){\n      dispatch(deleteReaction({commentId, reactionType}))\n    }\n    else{\n      dispatch(newReaction({commentId, reactionType}))\n    }\n  }\n}\n\nexport function newReaction({commentId, reactionType}) {\n  return (dispatch) => {\n\n    const reaction = {\n      type: reactionType\n    };\n\n    dispatch({\n      type: 'COMMENTS/NEW_REACTION',\n      http: true,\n      payload: {\n        url: `/api/v1/comments/${commentId}/reaction`,\n        method: 'POST',\n        data: reaction\n      },\n      meta: {\n        commentId,\n      }\n    })\n  }\n}\n\nexport function deleteReaction({commentId, reactionType}) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: 'COMMENTS/DELETE_REACTION',\n      http: true,\n      payload: {\n        url: `/api/v1/comments/${commentId}/reaction/${reactionType}`,\n        method: 'DELETE',\n      },\n      meta: {\n        commentId,\n        reactionType,\n        userId: getState().auth.user._id\n      }\n    })\n  }\n}\n\nexport function startEdit({commentId}) {\n  return {\n    type: 'COMMENTS/START_EDIT',\n    payload: {\n      commentId\n    }\n  }\n}\n\nexport function finishEdit({commentId}) {\n  return {\n    type: 'COMMENTS/FINISH_EDIT',\n    payload: {\n      commentId\n    }\n  }\n}\n\nexport function deleteComment({comment}) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: 'COMMENTS/DELETE',\n      payload: http({\n        url: `/api/v1/comments/${comment._id}`,\n        method: 'DELETE'\n      }),\n      meta: {\n        commentId: comment._id,\n        taskId: comment.task\n      }\n    }).then(response => {\n      // Get the eventId of the comment\n      const event = getState().tasks.events[comment.task].data.find(event => event.comment == comment._id);\n      if(event){\n        dispatch(TasksActions.deleteEvent({\n          taskId: comment.task,\n          eventId: event._id\n        }))\n      }\n    })\n  }\n}\n\n\nexport function updateComment({comment}) {\n  return {\n    type: 'COMMENTS/UPDATE',\n    http: true,\n    payload: {\n      url: `/api/v1/comments/${comment._id}`,\n      method: 'PUT',\n      data: comment\n    },\n    meta: {\n      commentId: comment._id\n    }\n  }\n}\n"]}