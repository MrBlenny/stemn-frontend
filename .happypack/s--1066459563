'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getUuid = require('app/shared/helpers/getUuid.js');

var _getUuid2 = _interopRequireDefault(_getUuid);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var oldState = { viewport: { eye: [1] } };
var filter = { viewport: true };
var syncIsActive = false;

var library = {
  activeInstances: [],
  register: register,
  deregister: deregister
};

exports.default = library;

////////////////////////////////////////////


function register(viewerEl) {
  var id = (0, _getUuid2.default)();
  var instance = new window.Autodesk.Viewing.Private.GuiViewer3D(viewerEl, {});
  instance.id = id;
  library.activeInstances.push(instance);
  if (library.activeInstances.length > 1 && !syncIsActive) {
    syncIsActive = true;

    addListenerMulti(document, 'mousemove vmousemove mousewheel click mousedown DOMMouseScroll scroll', onMove);
  }
  return instance;
}

function deregister(instance) {
  if (instance) {
    library.activeInstances.splice((0, _lodash.findIndex)(library.activeInstances, 'id', instance.id), 1);
    if (library.activeInstances.length < 2 && syncIsActive) {
      syncIsActive = false;
      removeListenerMulti(document, 'mousemove vmousemove mousewheel click mousedown DOMMouseScroll scroll', onMove);
    }
    instance.finish();
  }
}

function onMove() {
  if (library.activeInstances && library.activeInstances.length > 1) {
    var newState;
    var oldInstances = [];
    (0, _lodash.forEach)(library.activeInstances, function (instance) {
      if (instance.viewerState) {
        var possibleNewState = instance.getState(filter);
        // If the state is different, this is the new state!
        if (possibleNewState.viewport.eye[0] != oldState.viewport.eye[0]) {
          newState = possibleNewState;
        } else {
          oldInstances.push(instance);
        }
      }
    });

    // If there is a new state, update the old instances
    if (newState) {
      if (oldInstances.length > 0) {
        (0, _lodash.forEach)(oldInstances, function (instance) {
          instance.restoreState(newState, filter, true);
        });
      }
      oldState = newState;
    }
  }
}

function addListenerMulti(el, events, fn) {
  events.split(' ').forEach(function (event) {
    return el.addEventListener(event, fn);
  });
}
function removeListenerMulti(el, events, fn) {
  events.split(' ').forEach(function (event) {
    return el.removeEventListener(event, fn);
  });
}
module.exports = exports['default'];