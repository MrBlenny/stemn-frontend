{"version":3,"sources":["app\\renderer\\main\\modules\\UserSearch\\UserSearch.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;+CAEe,gBAAM,WAAN,CAAkB;AAC/B,UAD+B,oBACtB,KADsB,QACD;AAAA,QAAZ,QAAY,QAAZ,QAAY;;AAC5B,SAAK,KAAL,CAAW,iBAAX,CAA6B,gBAA7B,CAA8C,QAA9C;AACA,QAAM,QAAQ,SAAS,IAAT,EAAd;AACA,QAAI,UAAU,EAAd,EAAkB;AAChB,WAAK,KAAL,CAAW,iBAAX,CAA6B,gBAA7B;AACD;AACF,GAP8B;AAS/B,8BAT+B,+CASS;AAAA,QAAT,KAAS,SAAT,KAAS;;AACtC,QAAG,MAAM,MAAN,GAAe,CAAlB,EAAoB;AAClB,WAAK,KAAL,CAAW,iBAAX,CAA6B,eAA7B,CAA6C,KAA7C;AACD;AACF,GAb8B;AAe/B,oBAf+B,8BAeZ,UAfY,EAeA;AAC7B,WAAO,WAAW,IAAlB;AACD,GAjB8B;AAmB/B,kBAnB+B,4BAmBd,UAnBc,SAmBO;AAAA,QAAR,KAAQ,SAAR,KAAQ;;AACpC,QAAM,iBAAiB,WAAW,IAAlC;AACA,QAAM,UAAU,+BAAqB,KAArB,CAA2B,cAA3B,EAA2C,KAA3C,CAAhB;AACA,QAAM,QAAQ,+BAAqB,KAArB,CAA2B,cAA3B,EAA2C,OAA3C,CAAd;;AAEA,WACE;AAAA;AAAA,QAAK,WAAU,sCAAf;AACE,4DAAY,SAAS,WAAW,OAAhC,GADF;AAEE;AAAA;AAAA,UAAK,OAAO,EAAC,YAAY,MAAb,EAAZ,EAAkC,WAAU,MAA5C;AAEE,cAAM,GAAN,CAAU,UAAC,IAAD,EAAO,KAAP,EAAiB;AACzB,cAAM,YAAY,KAAK,SAAL,GAAiB,MAAjB,GAA0B,IAA5C;AACA,iBACE;AAAA;AAAA,cAAM,WAAW,SAAjB,EAA4B,KAAK,KAAjC;AAAyC,iBAAK;AAA9C,WADF;AAGD,SALD;AAFF;AAFF,KADF;AAgBD,GAxC8B;AA0C/B,sBA1C+B,gCA0CV,KA1CU,SA0CmD;AAAA,QAApD,UAAoD,SAApD,UAAoD;AAAA,QAAxC,eAAwC,SAAxC,eAAwC;AAAA,QAAvB,YAAuB,SAAvB,YAAuB;AAAA,QAAT,MAAS,SAAT,MAAS;;AAChF,QAAG,KAAK,KAAL,CAAW,MAAd,EAAqB;AACnB,WAAK,KAAL,CAAW,iBAAX,CAA6B,gBAA7B;AACA,WAAK,KAAL,CAAW,iBAAX,CAA6B,gBAA7B,CAA8C,EAA9C;AACA,WAAK,KAAL,CAAW,MAAX,CAAkB,UAAlB;AACD;AACF,GAhD8B;AAkD/B,QAlD+B,oBAkDtB;AACP,QAAM,aAAa;AACjB,mBAAa,gBADI;AAEjB,aAAO,KAAK,KAAL,CAAW,UAAX,CAAsB,KAFZ;AAGjB,gBAAU,KAAK;AAHE,KAAnB;;AAMA,WACE;AAAA;AAAA,QAAK,WAAU,eAAf;AACE;AACE,qBAAa,KAAK,KAAL,CAAW,UAAX,CAAsB,WADrC;AAEE,sCAA8B,KAAK,4BAFrC;AAGE,4BAAoB,KAAK,kBAH3B;AAIE,8BAAsB,KAAK,oBAJ7B;AAKE,0BAAkB,KAAK,gBALzB;AAME,oBAAY,UANd;AADF,KADF;AAWD;AApE8B,CAAlB,C","file":"UserSearch.jsx","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport AutosuggestHighlight from 'autosuggest-highlight';\n\nimport UserAvatar from 'app/renderer/main/components/Avatar/UserAvatar/UserAvatar.jsx'\n\nimport 'app/renderer/assets/css/autosuggest.css';\n\nexport default React.createClass({\n  onChange(event, { newValue }) {\n    this.props.UserSearchActions.updateInputValue(newValue)\n    const value = newValue.trim();\n    if (value === '') {\n      this.props.UserSearchActions.clearSuggestions();\n    }\n  },\n\n  onSuggestionsUpdateRequested({ value }) {\n    if(value.length > 0){\n      this.props.UserSearchActions.loadSuggestions(value);\n    }\n  },\n\n  getSuggestionValue(suggestion) {\n    return suggestion.name;\n  },\n\n  renderSuggestion(suggestion, {query}) {\n    const suggestionText = suggestion.name;\n    const matches = AutosuggestHighlight.match(suggestionText, query);\n    const parts = AutosuggestHighlight.parse(suggestionText, matches);\n\n    return (\n      <div className=\"layout-row layout-align-start-center\">\n        <UserAvatar picture={suggestion.picture}/>\n        <div style={{marginLeft: '10px'}} className=\"flex\">\n        {\n          parts.map((part, index) => {\n            const className = part.highlight ? 'bold' : null;\n            return (\n              <span className={className} key={index}>{part.text}</span>\n            );\n          })\n        }\n        </div>\n      </div>\n\n    );\n  },\n\n  onSuggestionSelected(event, { suggestion, suggestionValue, sectionIndex, method }){\n    if(this.props.select){\n      this.props.UserSearchActions.clearSuggestions();\n      this.props.UserSearchActions.updateInputValue('')\n      this.props.select(suggestion);\n    }\n  },\n\n  render() {\n    const inputProps = {\n      placeholder: \"Invite a user.\",\n      value: this.props.userSearch.value,\n      onChange: this.onChange\n    };\n\n    return (\n      <div className=\"app-container\">\n        <Autosuggest\n          suggestions={this.props.userSearch.suggestions}\n          onSuggestionsUpdateRequested={this.onSuggestionsUpdateRequested}\n          getSuggestionValue={this.getSuggestionValue}\n          onSuggestionSelected={this.onSuggestionSelected}\n          renderSuggestion={this.renderSuggestion}\n          inputProps={inputProps} />\n      </div>\n    );\n  }\n})\n"]}