'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = function () {
  var state = arguments.length <= 0 || arguments[0] === undefined ? initialState : arguments[0];
  var action = arguments[1];

  if (!state.hydrated) {
    state = _extends({}, initialState, state, { hydrated: true });
  }
  return (0, _reactReduxForm.modeled)(reducer, 'system')(state, action);
};

var _reactReduxForm = require('react-redux-form');

var initialState = {
  providerPath: {
    dropbox: null,
    drive: null,
    onedrive: null
  },
  settings: {
    usageData: true
  },
  currentVersion: null,
  checkingForUpdate: false,
  updateAvailable: false,
  updateDownloaded: false,
  release: {},
  updateError: false,
  updateNotAvailable: false
};

function reducer(state, action) {
  switch (action.type) {
    case 'SYSTEM/GET_PROVIDER_PATH_FULFILLED':
      {
        return _extends({}, state, {
          providerPath: {
            dropbox: action.payload.dropbox,
            drive: action.payload.drive
          }
        });
      }

    case 'SYSTEM/CURRENT_VERSION':
      {
        return _extends({}, state, {
          currentVersion: action.payload.version
        });
      }

    case 'SYSTEM/CHECKING_FOR_UPDATE':
      {
        return _extends({}, state, initialState, {
          checkingForUpdate: true
        });
      }

    case 'SYSTEM/UPDATE_AVAILABLE':
      {
        return _extends({}, state, initialState, {
          updateAvailable: true
        });
      }

    case 'SYSTEM/UPDATE_DOWNLOADED':
      {
        var _action$payload = action.payload;
        var releaseNotes = _action$payload.releaseNotes;
        var releaseName = _action$payload.releaseName;
        var releaseDate = _action$payload.releaseDate;
        var updateURL = _action$payload.updateURL;

        return _extends({}, state, initialState, {
          updateDownloaded: true,
          release: {
            releaseNotes: releaseNotes,
            releaseName: releaseName,
            releaseDate: releaseDate,
            updateURL: updateURL
          }
        });
      }

    case 'SYSTEM/UPDATE_ERROR':
      {
        return _extends({}, state, initialState, {
          updateError: action.payload
        });
      }

    case 'SYSTEM/UPDATE_NOT_AVAILABLE':
      {
        return _extends({}, state, initialState, {
          updateNotAvailable: true
        });
      }

    default:
      return state;
  }
}

module.exports = exports['default'];