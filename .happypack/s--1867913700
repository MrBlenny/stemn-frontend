'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _index = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\redbox-react\\lib\\index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-catch-errors\\lib\\index.js');

var _index4 = _interopRequireDefault(_index3);

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index5 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-hmr\\lib\\index.js');

var _index6 = _interopRequireDefault(_index5);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _substyle = require('substyle');

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _Suggestion = require('./Suggestion');

var _Suggestion2 = _interopRequireDefault(_Suggestion);

var _LoadingIndicator = require('./LoadingIndicator');

var _LoadingIndicator2 = _interopRequireDefault(_LoadingIndicator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  SuggestionsOverlay: {
    displayName: 'SuggestionsOverlay'
  }
};

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Mentions/MentionsInput/SuggestionsOverlay.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Mentions/MentionsInput/SuggestionsOverlay.js',
  components: _components,
  locals: [],
  imports: [_react3.default, _index2.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2(_CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
  };
}

var SuggestionsOverlay = _wrapComponent('SuggestionsOverlay')((_temp = _class = function (_Component) {
  _inherits(SuggestionsOverlay, _Component);

  function SuggestionsOverlay() {
    _classCallCheck(this, SuggestionsOverlay);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(SuggestionsOverlay).apply(this, arguments));
  }

  _createClass(SuggestionsOverlay, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var suggestions = this.refs.suggestions;

      if (!suggestions || suggestions.offsetHeight >= suggestions.scrollHeight || !this.props.scrollFocusedIntoView) {
        return;
      }

      var scrollTop = suggestions.scrollTop;

      var _suggestions$children = suggestions.children[this.props.focusIndex].getBoundingClientRect();

      var top = _suggestions$children.top;
      var bottom = _suggestions$children.bottom;

      var _suggestions$getBound = suggestions.getBoundingClientRect();

      var topContainer = _suggestions$getBound.top;

      top = top - topContainer + scrollTop;
      bottom = bottom - topContainer + scrollTop;

      if (top < scrollTop) {
        suggestions.scrollTop = top;
      } else if (bottom > suggestions.offsetHeight) {
        suggestions.scrollTop = bottom - suggestions.offsetHeight;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      // do not show suggestions until there is some data
      if (_utils2.default.countSuggestions(this.props.suggestions) === 0 && !this.props.isLoading) {
        return null;
      }

      return _react3.default.createElement(
        'div',
        _extends({}, substyle(this.props), {
          onMouseDown: this.props.onMouseDown }),
        _react3.default.createElement(
          'ul',
          _extends({ ref: 'suggestions'
          }, substyle(this.props, "list")),
          this.renderSuggestions()
        ),
        this.renderLoadingIndicator()
      );
    }
  }, {
    key: 'renderSuggestions',
    value: function renderSuggestions() {
      var _this2 = this;

      return _utils2.default.getSuggestions(this.props.suggestions).reduce(function (result, _ref) {
        var suggestions = _ref.suggestions;
        var descriptor = _ref.descriptor;
        return [].concat(_toConsumableArray(result), _toConsumableArray(suggestions.map(function (suggestion, index) {
          return _this2.renderSuggestion(suggestion, descriptor, result.length + index);
        })));
      }, []);
    }
  }, {
    key: 'renderSuggestion',
    value: function renderSuggestion(suggestion, descriptor, index) {
      var _this3 = this;

      var id = this.getID(suggestion);
      var isFocused = index === this.props.focusIndex;

      var mentionDescriptor = descriptor.mentionDescriptor;
      var query = descriptor.query;


      return _react3.default.createElement(_Suggestion2.default, _extends({}, substyle(this.props, "item"), {
        key: id,
        id: id,
        ref: isFocused ? "focused" : null,
        query: query,
        index: index,
        descriptor: mentionDescriptor,
        suggestion: suggestion,
        focused: isFocused,
        onClick: function onClick() {
          return _this3.select(suggestion, descriptor);
        },
        onMouseEnter: function onMouseEnter() {
          return _this3.handleMouseEnter(index);
        } }));
    }
  }, {
    key: 'getID',
    value: function getID(suggestion) {
      if (suggestion instanceof String) {
        return suggestion;
      }

      return suggestion.id;
    }
  }, {
    key: 'renderLoadingIndicator',
    value: function renderLoadingIndicator() {
      if (!this.props.isLoading) {
        return;
      }

      return _react3.default.createElement(_LoadingIndicator2.default, substyle(this.props, "loadingIndicator"));
    }
  }, {
    key: 'handleMouseEnter',
    value: function handleMouseEnter(index, ev) {
      if (this.props.onMouseEnter) {
        this.props.onMouseEnter(index);
      }
    }
  }, {
    key: 'select',
    value: function select(suggestion, descriptor) {
      this.props.onSelect(suggestion, descriptor);
    }
  }]);

  return SuggestionsOverlay;
}(_react2.Component), _class.propTypes = {
  suggestions: _react2.PropTypes.object.isRequired,
  focusIndex: _react2.PropTypes.number,
  scrollFocusedIntoView: _react2.PropTypes.bool,
  isLoading: _react2.PropTypes.bool,
  onSelect: _react2.PropTypes.func
}, _class.defaultProps = {
  suggestions: {},
  onSelect: function onSelect() {
    return null;
  }
}, _temp));

;

exports.default = SuggestionsOverlay;


var substyle = (0, _substyle.defaultStyle)({
  position: "absolute",
  zIndex: 1,
  backgroundColor: "white",
  marginTop: 14,
  minWidth: 100,

  list: {
    margin: 0,
    padding: 0,
    listStyleType: "none"
  }
});
module.exports = exports['default'];