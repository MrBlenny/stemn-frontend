'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = undefined;

var _index = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\redbox-react\\lib\\index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-catch-errors\\lib\\index.js');

var _index4 = _interopRequireDefault(_index3);

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index5 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-hmr\\lib\\index.js');

var _index6 = _interopRequireDefault(_index5);

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _projects = require('app/shared/actions/projects.js');

var ProjectsActions = _interopRequireWildcard(_projects);

var _ModalActions = require('app/renderer/main/modules/Modal/Modal.actions.js');

var ModalActions = _interopRequireWildcard(_ModalActions);

var _lodash = require('lodash');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ProjectSettingsPage = require('../ProjectSettingsPage.css');

var _ProjectSettingsPage2 = _interopRequireDefault(_ProjectSettingsPage);

var _reactReduxForm = require('react-redux-form');

var _Tabs = require('app/renderer/main/components/Tabs/Tabs');

var _Tabs2 = _interopRequireDefault(_Tabs);

var _Toggle = require('app/renderer/main/components/Input/Toggle/Toggle');

var _Toggle2 = _interopRequireDefault(_Toggle);

var _UserSearchContainer = require('app/renderer/main/modules/UserSearch/UserSearch.container.js');

var _UserSearchContainer2 = _interopRequireDefault(_UserSearchContainer);

var _TeamMember = require('app/renderer/main/components/Project/TeamMember/TeamMember.jsx');

var _TeamMember2 = _interopRequireDefault(_TeamMember);

var _ProjectLinkRemote = require('app/renderer/main/components/Project/ProjectLinkRemote/ProjectLinkRemote.jsx');

var _ProjectLinkRemote2 = _interopRequireDefault(_ProjectLinkRemote);

var _FileSelectInput = require('app/renderer/main/modules/FileSelectInput/FileSelectInput.jsx');

var _FileSelectInput2 = _interopRequireDefault(_FileSelectInput);

var _ProgressButton = require('app/renderer/main/components/Buttons/ProgressButton/ProgressButton');

var _ProgressButton2 = _interopRequireDefault(_ProgressButton);

var _TaskLabelsEdit = require('app/renderer/main/modules/Tasks/TaskLabelsEdit/TaskLabelsEdit.jsx');

var _TaskLabelsEdit2 = _interopRequireDefault(_TaskLabelsEdit);

var _NavPill = require('app/renderer/main/components/Buttons/NavPill/NavPill');

var _NavPill2 = _interopRequireDefault(_NavPill);

var _Input = require('app/renderer/main/components/Input/Input/Input');

var _Input2 = _interopRequireDefault(_Input);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/pages/ProjectPage/ProjectSettingsPage/ProjectSettingsGeneralPage/ProjectSettingsGeneralPage.jsx',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/pages/ProjectPage/ProjectSettingsPage/ProjectSettingsGeneralPage/ProjectSettingsGeneralPage.jsx',
  components: _components,
  locals: [],
  imports: [_react3.default, _index2.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2(_CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
  };
} // Container Core


// Container Actions


// Component Core

// Styles


// Sub Components

//import ProjectPermissionsRadio from 'app/renderer/main/components/Project/ProjectPermissionsRadio/ProjectPermissionsRadio.jsx'


///////////////////////////////// COMPONENT /////////////////////////////////

var onMount = function onMount(nextProps, prevProps) {
  if (nextProps.project && nextProps.project.data) {
    if (!prevProps || nextProps.project.data._id !== prevProps.project.data._id) {
      // Init the filestore form model
      nextProps.dispatch(_reactReduxForm.actions.load(nextProps.entityModel + '.formModels.fileStore.remote', nextProps.project.data.remote));
    }
  }
};

var Component = exports.Component = _wrapComponent('_component')(_react3.default.createClass({
  displayName: 'Component',


  // Mounting
  componentWillMount: function componentWillMount() {
    onMount(this.props);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    onMount(nextProps, this.props);
  },
  selectFn: function selectFn(selection) {
    if (!this.props.project.data.team.find(function (item) {
      return item._id == selection._id;
    })) {
      this.props.ProjectsActions.addTeamMember({
        projectId: this.props.project.data._id,
        user: selection
      });
    }
  },
  changePermissionsFn: function changePermissionsFn(_ref) {
    var role = _ref.role;
    var userId = _ref.userId;

    this.props.ProjectsActions.changeUserPermissions({
      role: role,
      userId: userId,
      projectId: this.props.project.data._id
    });
  },
  removeTeamMemberFn: function removeTeamMemberFn(_ref2) {
    var userId = _ref2.userId;

    this.props.ProjectsActions.removeTeamMember({
      userId: userId,
      projectId: this.props.project.data._id
    });
  },
  linkRemote: function linkRemote() {
    // This is not wrapped in dispach!
    return ProjectsActions.linkRemote({
      projectId: this.props.project.data._id,
      provider: this.props.project.formModels.fileStore.remote.provider,
      path: this.props.project.formModels.fileStore.remote.root.path,
      id: this.props.project.formModels.fileStore.remote.root.fileId
    });
  },
  confirmLinkRemote: function confirmLinkRemote() {
    // If the store is connected - we confirm the change
    if (this.props.project.data.remote.connected) {
      this.props.ModalActions.showConfirm({
        message: 'Changing your file store settings will delete your entire commit and change history. Are you sure you want to do this? Consider creating a new project.',
        modalConfirm: this.linkRemote()
      });
    }
    // Else change straight away.
    else {
        this.props.dispatch(this.linkRemote());
      }
  },
  saveProject: function saveProject() {
    this.props.ProjectsActions.saveProject({
      project: this.props.project.data
    });
  },
  render: function render() {
    var _this = this;

    var _props = this.props;
    var entityModel = _props.entityModel;
    var project = _props.project;
    var ProjectsActions = _props.ProjectsActions;
    var dispatch = _props.dispatch;

    return _react3.default.createElement(
      'div',
      null,
      _react3.default.createElement(
        'div',
        { className: _ProjectSettingsPage2.default.panel },
        _react3.default.createElement(
          'h3',
          null,
          'General Settings'
        ),
        _react3.default.createElement(
          'p',
          null,
          'Add your project name and blurb.'
        ),
        _react3.default.createElement(_Input2.default, {
          model: entityModel + '.data.name',
          value: project.data.name,
          className: 'dr-input',
          type: 'text',
          placeholder: 'Project Name'
        }),
        _react3.default.createElement('br', null),
        _react3.default.createElement(_Input2.default, {
          model: entityModel + '.data.summary',
          value: project.data.summary,
          className: 'dr-input',
          type: 'text',
          placeholder: 'Project Summary'
        }),
        _react3.default.createElement('br', null),
        _react3.default.createElement(
          'div',
          { className: 'layout-row layout-align-end' },
          _react3.default.createElement(
            _ProgressButton2.default,
            {
              className: 'primary',
              onClick: function onClick() {
                return _this.saveProject();
              },
              loading: project.savePending
            },
            'Update Project'
          )
        )
      ),
      _react3.default.createElement(
        'div',
        { className: _ProjectSettingsPage2.default.panel },
        _react3.default.createElement(
          'h3',
          null,
          'File Store Settings'
        ),
        _react3.default.createElement(
          'p',
          null,
          'Connect your Dropbox or Drive to sync all files and changes. Only one Google Drive or one Dropbox can be connected to a project.'
        ),
        (0, _lodash.has)(project, 'formModels.fileStore.remote.provider') ? _react3.default.createElement(_ProjectLinkRemote2.default, { model: entityModel + '.formModels.fileStore.remote.provider', value: project.formModels.fileStore.remote.provider }) : null,
        _react3.default.createElement('br', null),
        (0, _lodash.has)(project, 'formModels.fileStore.remote.provider') && (project.formModels.fileStore.remote.provider == 'dropbox' || project.formModels.fileStore.remote.provider == 'drive') ? _react3.default.createElement(
          'div',
          null,
          _react3.default.createElement(_FileSelectInput2.default, {
            projectId: project.data._id,
            provider: project.formModels.fileStore.remote.provider,
            model: entityModel + '.formModels.fileStore.remote.root',
            value: project.formModels.fileStore.remote.root
          })
        ) : '',
        _react3.default.createElement('br', null),
        _react3.default.createElement(
          'div',
          { className: 'layout-row layout-align-end' },
          _react3.default.createElement(
            _ProgressButton2.default,
            {
              className: 'primary',
              onClick: function onClick() {
                return _this.confirmLinkRemote();
              },
              loading: project.linkPending
            },
            'Update File Store'
          )
        )
      ),
      _react3.default.createElement(
        'div',
        { className: _ProjectSettingsPage2.default.panel },
        _react3.default.createElement(
          'h3',
          null,
          'Delete Project'
        ),
        _react3.default.createElement(
          'p',
          null,
          'Once you delete a project, there is no going back. Please be certain.'
        ),
        _react3.default.createElement(
          'div',
          { className: 'layout-row layout-align-end' },
          _react3.default.createElement(
            _ProgressButton2.default,
            { className: 'warn',
              onClick: function onClick() {
                return ProjectsActions.confirmDeleteProject({ projectId: project.data._id });
              } },
            'Delete Project'
          )
        )
      )
    );
  }
}));

//       <div className={classes.panel}>
//         <h3>Project Type</h3>
//         <p>Is this a public or private project? Change your project to public to open-source your work.</p>
//         <ProjectPermissionsRadio model={`${entityModel}.data.permissions.projectType`} />
//       </div>

/////////////////////////////////////////////////////////////////////////////
///////////////////////////////// CONTAINER /////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

function mapStateToProps(_ref3, otherProps) {
  var projects = _ref3.projects;

  return {
    project: projects.data[otherProps.params.stub],
    entityModel: 'projects.data.' + otherProps.params.stub
  };
}

function mapDispatchToProps(dispatch) {
  return {
    dispatch: dispatch,
    ProjectsActions: (0, _redux.bindActionCreators)(ProjectsActions, dispatch),
    ModalActions: (0, _redux.bindActionCreators)(ModalActions, dispatch)
  };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Component);