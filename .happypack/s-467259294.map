{"version":3,"sources":["app\\main\\modules\\auth\\auth.js"],"names":[],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA;AACA,IAAI,SAAS,IAAb;;AAEO,IAAM,gCAAY,SAAZ,SAAY,GAAM;AAC7B,MAAG,CAAC,MAAJ,EAAW;AACT,aAAS,IAAI,iBAAO,aAAX,CAAyB;AAChC,YAAM,KAD0B;AAEhC,aAAO,GAFyB;AAGhC,cAAQ;AAHwB,KAAzB,CAAT;AAKA,WAAO,OAAP,CAAe,IAAf;AACA,WAAO,cAAP,CAAsB,IAAtB;AACA,WAAO,YAAP,CAAoB,KAApB;AACA,WAAO,EAAP,CAAU,QAAV,EAAoB,YAAM;AACxB,eAAS,IAAT;AACD,KAFD;AAGD;AACD,SAAO,MAAP;AACD,CAfM;;AAiBA,IAAM,sCAAe,SAAf,YAAe,OAAgB;AAAA,MAAd,QAAc,QAAd,QAAc;;AAC1C,MAAI,kBAAkB,IAAtB;;AAEA,SAAO,wBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,QAAI,aAAa,KAAjB;AACA;AACA,QAAG,uBAAW,QAAX,CAAH,EAAwB;AAAA;AACtB,YAAM,MAAM,uBAAW,QAAX,EAAqB,GAArB,GAA0B,GAA1B,GAA+B,sBAAY,SAAZ,CAAsB,uBAAW,QAAX,EAAqB,MAA3C,CAA3C;AACA,gBAAQ,GAAR,CAAY,GAAZ;AACA,YAAM,SAAS,WAAf;;AAEA,eAAO,OAAP,CAAe,GAAf;AACA,eAAO,WAAP,CAAmB,EAAnB,CAAsB,iBAAtB,EAAyC,YAAM;AAC7C,iBAAO,IAAP;AACA,iBAAO,KAAP;AACD,SAHD;;AAKA;AACA,eAAO,WAAP,CAAmB,EAAnB,CAAsB,eAAtB,EAAuC,UAAU,KAAV,EAAiB,GAAjB,EAAsB;AAC3D,cAAG,CAAC,UAAJ,EAAe;AACb,yBAAa,MAAb;AACD;AACD,uBAAa,IAAb;AACD,SALD;AAMA,eAAO,WAAP,CAAmB,EAAnB,CAAsB,0BAAtB,EAAkD,UAAU,KAAV,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC;AACjF,cAAG,CAAC,UAAJ,EAAe;AACb,yBAAa,MAAb;AACD;AACD,uBAAa,IAAb;AACD,SALD;;AAOA,eAAO,EAAP,CAAU,QAAV,EAAoB,YAAM;AACxB,cAAG,CAAC,eAAJ,EAAoB;AAClB,mBAAO,EAAC,OAAO,eAAR,EAAP;AACD;AACF,SAJD;;AAMA,YAAM,eAAe,SAAf,YAAe,CAAC,GAAD,EAAS;AAC3B,cAAM,SAAS,YAAY,SAAZ,GAAwB,sBAAY,KAAZ,CAAkB,IAAI,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAlB,CAAxB,GAA+D,sBAAY,KAAZ,CAAkB,IAAI,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAlB,CAA9E;AACA,cAAI,OAAO,YAAP,IAAuB,OAAO,IAAlC,EAAwC;AACvC,8BAAkB,qBAAK;AACrB,sBAAQ,MADa;AAErB,mBAAK,uBAAW,QAAX,EAAqB,OAFL;AAGrB,oBAAM;AACJ,sBAAM,OAAO,IAAP,IAAe,OAAO,YADxB;AAEJ,6BAAa,uBAAW,QAAX,EAAqB,MAArB,CAA4B;AAFrC;AAHe,aAAL,EAQjB,IARiB,CAQZ,OARY,EASjB,KATiB,CASX,MATW,CAAlB;;AAWA,mBAAO,KAAP;AACD,WAbA,MAaM;AACL,mBAAO,KAAP;AACA,mBAAO,EAAC,OAAO,sBAAR,EAAP;AACD;AACF,SAnBD;AA/BsB;AAmDvB,KAnDD,MAoDI;AACF,aAAO,EAAC,OAAO,kBAAR,EAAP;AACD;AACF,GA1DM,CAAP;AA2DD,CA9DM","file":"auth.js","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["import { remote } from 'electron';\nimport { oauthCreds } from './auth.config.js';\nimport querystring from 'querystring';\nimport http from 'axios';\nimport { Promise } from 'es6-promise';\n\n// Init the Auth Window\nlet window = null;\n\nexport const getWindow = () => {\n  if(!window){\n    window = new remote.BrowserWindow({\n      show: false,\n      width: 800,\n      height: 850,\n    });\n    window.setMenu(null);\n    window.setAlwaysOnTop(true);\n    window.setResizable(false);\n    window.on('closed', () => {\n      window = null;\n    });\n  }\n  return window\n}\n\nexport const authenticate = ({provider}) => {\n  let authHttpPromise = null;\n\n  return new Promise((resolve, reject) => {\n    let ranAlready = false;\n    // If the provider is supported\n    if(oauthCreds[provider]){\n      const url = oauthCreds[provider].url +'?'+ querystring.stringify(oauthCreds[provider].params);\n      console.log(url);\n      const window = getWindow();\n\n      window.loadURL(url);\n      window.webContents.on('did-finish-load', () => {\n        window.show();\n        window.focus();\n      });\n\n      // Process the url if it changes - check for access token\n      window.webContents.on('will-navigate', function (event, url) {\n        if(!ranAlready){\n          processToken(newUrl);\n        }\n        ranAlready = true;\n      });\n      window.webContents.on('did-get-redirect-request', function (event, oldUrl, newUrl) {\n        if(!ranAlready){\n          processToken(newUrl);\n        }\n        ranAlready = true;\n      });\n\n      window.on('closed', () => {\n        if(!authHttpPromise){\n          reject({error: 'Window Closed'})\n        }\n      });\n\n      const processToken = (url) => {\n         const params = provider == 'dropbox' ? querystring.parse(url.split('#')[1]) : querystring.parse(url.split('?')[1]);\n         if (params.access_token || params.code) {\n          authHttpPromise = http({\n            method: 'POST',\n            url: oauthCreds[provider].postUrl,\n            data: {\n              code: params.code || params.access_token,\n              redirectUri: oauthCreds[provider].params.redirect_uri\n            }\n          })\n          .then(resolve)\n          .catch(reject);\n\n          window.close();\n        } else {\n          window.close();\n          reject({error: 'Could not find token'})\n        }\n      }\n    }\n    else{\n      reject({error: 'Unsupported Type'})\n    }\n  });\n}\n"]}