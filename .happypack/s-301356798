'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = undefined;

var _index = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\redbox-react\\lib\\index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-catch-errors\\lib\\index.js');

var _index4 = _interopRequireDefault(_index3);

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index5 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-hmr\\lib\\index.js');

var _index6 = _interopRequireDefault(_index5);

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _reactReduxForm = require('react-redux-form');

var _getUuid = require('app/shared/helpers/getUuid.js');

var _getUuid2 = _interopRequireDefault(_getUuid);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _TaskMentionModal = require('./TaskMentionModal.css');

var _TaskMentionModal2 = _interopRequireDefault(_TaskMentionModal);

var _howMany = require('app/shared/helpers/strings/howMany.js');

var _howMany2 = _interopRequireDefault(_howMany);

var _Checkbox = require('app/renderer/main/components/Input/Checkbox/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _Input = require('app/renderer/main/components/Input/Input/Input');

var _Input2 = _interopRequireDefault(_Input);

var _Button = require('app/renderer/main/components/Buttons/Button/Button');

var _Button2 = _interopRequireDefault(_Button);

var _TaskRow = require('./TaskRow/TaskRow.jsx');

var _TaskRow2 = _interopRequireDefault(_TaskRow);

var _search = require('react-icons/md/search');

var _search2 = _interopRequireDefault(_search);

var _TasksUtils = require('app/renderer/main/modules/Tasks/Tasks.utils.js');

var _TasksFilterMenu = require('app/renderer/main/modules/Tasks/TasksFilterMenu/TasksFilterMenu.jsx');

var _TasksFilterMenu2 = _interopRequireDefault(_TasksFilterMenu);

var _PopoverMenu = require('app/renderer/main/components/PopoverMenu/PopoverMenu');

var _PopoverMenu2 = _interopRequireDefault(_PopoverMenu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Mentions/TaskMentionModal/TaskMentionModal.jsx',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Mentions/TaskMentionModal/TaskMentionModal.jsx',
  components: _components,
  locals: [],
  imports: [_react3.default, _index2.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2(_CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
  };
} // Container Core


// Container Actions

// Component Core


// Styles


// Helpers


// Sub Components


///////////////////////////////// COMPONENT /////////////////////////////////

var onMount = function onMount(nextProps, prevProps) {
  if (nextProps.task) {
    if (!prevProps || nextProps.task.project._id !== prevProps.task.project._id) {}
  }
};
var Component = exports.Component = _wrapComponent('_component')(_react3.default.createClass({
  displayName: 'Component',


  // Mounting
  componentWillMount: function componentWillMount() {
    onMount(this.props);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    onMount(nextProps, this.props);
  },
  submit: function submit() {
    // Get the mentions
    var mentions = getMentionsFromObject(this.props.mentions, this.props.tasks);
    // Clear props.mentions;
    this.props.dispatch(_reactReduxForm.actions.change(this.props.mentionsModel, {}));

    this.props.modalConfirm({ mentions: mentions });
    this.props.modalHide();
  },
  cancel: function cancel() {
    this.props.modalCancel();
    this.props.modalHide();
  },
  toggle: function toggle(_ref) {
    var _this = this;

    var type = _ref.type;
    var taskId = _ref.taskId;
    var mention = _ref.mention;

    // type == 'complete' || 'related'
    var toggleField = function toggleField(type1, type2) {
      var value = mention ? !mention[type1] : true;
      if (value) {
        _this.props.dispatch(_reactReduxForm.actions.change(_this.props.mentionsModel + '.' + taskId + '.' + type1, value));
        _this.props.dispatch(_reactReduxForm.actions.change(_this.props.mentionsModel + '.' + taskId + '.' + type2, !value));
      } else {
        _this.props.dispatch(_reactReduxForm.actions.change(_this.props.mentionsModel + '.' + taskId + '.' + type1, value));
      }
    };
    return type == 'complete' ? toggleField('complete', 'related') : toggleField('related', 'complete');
  },
  render: function render() {
    var _this2 = this;

    var _props = this.props;
    var tasks = _props.tasks;
    var board = _props.board;
    var mentions = _props.mentions;
    var boardModel = _props.boardModel;


    if (!board) {
      return _react3.default.createElement(
        'div',
        null,
        'Loading'
      );
    }

    var filteredBoard = (0, _TasksUtils.filterBoard)(board, tasks, board.searchString);
    var numTasks = (0, _TasksUtils.getAllTasks)(board.data.groups).length;
    var numFilteredTasks = (0, _TasksUtils.getAllTasks)(filteredBoard.data.groups).length;

    return _react3.default.createElement(
      'div',
      { className: _TaskMentionModal2.default.modal + ' layout-column' },
      _react3.default.createElement(
        'div',
        { className: 'modal-title' },
        'Add tasks to a commit:'
      ),
      _react3.default.createElement(
        'div',
        { className: _TaskMentionModal2.default.header + ' layout-row layout-align-start-center' },
        _react3.default.createElement(
          'div',
          { className: 'flex' },
          (0, _howMany2.default)({ count: filterMentions(mentions, 'complete').length, adj: 'complete' }, { count: filterMentions(mentions, 'related').length, adj: 'related' }, 'task')
        ),
        _react3.default.createElement(
          'div',
          { className: _TaskMentionModal2.default.search },
          _react3.default.createElement(_Input2.default, {
            model: boardModel + '.searchString',
            value: board.searchString,
            className: 'dr-input',
            placeholder: 'Search tasks'
          }),
          _react3.default.createElement(
            _PopoverMenu2.default,
            { preferPlace: 'right', trigger: 'hoverDelay' },
            _react3.default.createElement(_search2.default, { size: '20' }),
            _react3.default.createElement(
              'div',
              null,
              _react3.default.createElement(_TasksFilterMenu2.default, { model: boardModel + '.searchString', value: board.searchString })
            )
          )
        )
      ),
      numTasks == 0 || numFilteredTasks == 0 ? _react3.default.createElement(
        'div',
        { className: 'flex layout-column layout-align-center-center text-center' },
        numTasks == 0 ? _react3.default.createElement(
          'div',
          { style: { width: '100%' } },
          'This project has no tasks. Add some.'
        ) : _react3.default.createElement(
          'div',
          { style: { width: '100%' } },
          'No results, ',
          _react3.default.createElement(
            'a',
            { className: 'text-primary', onClick: function onClick() {
                return _this2.props.dispatch(_reactReduxForm.actions.change(boardModel + '.searchString', ''));
              } },
            'clear search filter.'
          )
        )
      ) : _react3.default.createElement(
        'div',
        { className: 'flex scroll-box' },
        filteredBoard.data.groups.map(function (group) {
          return _react3.default.createElement(
            'div',
            null,
            group.tasks.map(function (taskId) {
              return _react3.default.createElement(_TaskRow2.default, {
                key: taskId,
                taskId: taskId,
                mention: mentions[taskId],
                toggleComplete: function toggleComplete() {
                  return _this2.toggle({ type: 'complete', taskId: taskId, mention: mentions[taskId] });
                },
                toggleRelated: function toggleRelated() {
                  return _this2.toggle({ type: 'related', taskId: taskId, mention: mentions[taskId] });
                }
              });
            })
          );
        })
      ),
      _react3.default.createElement(
        'div',
        { className: 'modal-footer layout-row layout-align-start-center' },
        _react3.default.createElement('div', { className: 'flex text-description-1' }),
        _react3.default.createElement(
          _Button2.default,
          { style: { marginRight: '10px' }, onClick: this.cancel },
          'Cancel'
        ),
        _react3.default.createElement(
          _Button2.default,
          { className: 'primary', onClick: this.submit },
          'Add Tasks'
        )
      )
    );
  }
}));

function filterMentions(mentions, type) {
  var mentionsArray = mentions ? Object.keys(mentions).map(function (taskId) {
    return mentions[taskId];
  }) : [];
  // type == 'complete' || 'related'
  return mentionsArray.length > 0 ? mentionsArray.filter(function (mention) {
    return mention[type];
  }) : [];
}

function getMentionsFromObject(mentionsObject, tasks) {
  var mentions = [];
  Object.keys(mentionsObject).forEach(function (taskId) {
    if (mentionsObject[taskId].complete) {
      mentions.push(newMention({ entityId: taskId, display: tasks[taskId].data.name, mentionType: 'task-complete' }));
    } else if (mentionsObject[taskId].related) {
      mentions.push(newMention({ entityId: taskId, display: tasks[taskId].data.name, mentionType: 'task' }));
    }
  });
  return mentions;
}

function newMention(_ref2) {
  var entityId = _ref2.entityId;
  var display = _ref2.display;
  var mentionType = _ref2.mentionType;

  return {
    entityId: entityId,
    display: display,
    mentionType: mentionType,
    mentionId: (0, _getUuid2.default)()
  };
}

///////////////////////////////// CONTAINER /////////////////////////////////

function mapStateToProps(_ref3, _ref4) {
  var tasks = _ref3.tasks;
  var mentions = _ref3.mentions;
  var projectId = _ref4.projectId;

  var projectBoards = tasks.projects && tasks.projects[projectId] ? tasks.projects[projectId].boards : null;
  var board = projectBoards ? tasks.boards[projectBoards[0]] : {};
  return {
    tasks: tasks.data,
    board: board,
    boardModel: board && board.data && board.data._id ? 'tasks.boards.' + board.data._id : '',
    mentions: mentions.tasks[projectId] || {},
    mentionsModel: 'mentions.tasks.' + projectId
  };
}

function mapDispatchToProps(dispatch) {
  return {
    dispatch: dispatch
  };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Component);