{"version":3,"sources":["app\\renderer\\main\\modules\\Tasks\\Tasks.utils.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AAEO,IAAM,oCAAc,SAAd,WAAc,CAAC,KAAD,EAAQ,KAAR,EAAe,YAAf,EAAgC;AACzD;AACA,MAAM,mBAAmB,eAAe,aAAa,KAAb,CAAmB,GAAnB,CAAf,GAAyC,EAAlE;AACA,SAAO,kBAAE,QAAF,CAAW,KAAX,EAAkB,CAAC,MAAD,EAAS,QAAT,CAAlB,EAAsC;AAAA,WAC3C,aAAa,EAAC,cAAD,EAAS,YAAT,EAAgB,UAAU,kBAAC,IAAD,EAAU;AAC/C,eAAO,QAAQ,KAAK,IAAb,GAAoB,mBAAM,gBAAN,EAAwB;AAAA,iBAAe,cAAc,IAAd,EAAoB,WAApB,CAAf;AAAA,SAAxB,CAApB,GAA+F,IAAtG;AACD,OAFY,EAAb,CAD2C;AAAA,GAAtC,CAAP;AAKD,CARM;;AAUA,IAAM,oCAAc,SAAd,WAAc,CAAC,WAAD,EAAgB;AACzC,MAAI,QAAQ,EAAZ;AACA,cAAY,OAAZ,CAAoB;AAAA,WAAS,QAAQ,MAAM,MAAN,CAAa,MAAM,KAAnB,CAAjB;AAAA,GAApB;AACA,SAAO,KAAP;AACD,CAJM;;AAMP,SAAS,aAAT,CAAuB,IAAvB,EAA6B,WAA7B,EAAyC;AACvC;;;;AAIA,MAAQ,eAAe,aAAf,IAAgC,eAAe,cAAvD,EAAsE;AACpE,WAAO,KAAK,IAAL,CAAU,QAAjB;AACD,GAFD,MAGK,IAAG,eAAe,eAAlB,EAAkC;AACrC,WAAO,CAAC,KAAK,IAAL,CAAU,QAAlB;AACD;AACD;AAHK,OAIA,IAAG,YAAY,UAAZ,CAAuB,WAAvB,CAAH,EAAuC;AAAA;AAC1C,YAAM,WAAW,YAAY,OAAZ,CAAoB,WAApB,EAAiC,EAAjC,CAAjB;AACA;AAAA,aAAO,KAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,CAAqB;AAAA,mBAAQ,KAAK,IAAL,IAAa,QAArB;AAAA,WAArB;AAAP;AAF0C;;AAAA;AAG3C;AACD;AAJK,SAKA,IAAG,eAAe,YAAY,MAAZ,GAAqB,CAAvC,EAAyC;AAC5C,eAAO,IAAI,MAAJ,CAAW,WAAX,EAAwB,GAAxB,EAA6B,IAA7B,CAAkC,KAAK,IAAL,CAAU,IAA5C,CAAP;AACD,OAFI,MAGD;AACF,eAAO,IAAP;AACD;AACF;;AAED,SAAS,YAAT,OAAgD;AAAA,MAAzB,MAAyB,QAAzB,MAAyB;AAAA,MAAjB,KAAiB,QAAjB,KAAiB;AAAA,MAAV,QAAU,QAAV,QAAU;;AAC9C,SAAO,OAAO,GAAP,CAAW,iBAAS;AACzB,WAAO,kBAAE,QAAF,CAAW,KAAX,EAAkB,CAAC,OAAD,CAAlB,EAA6B,mBAAW;AAC7C,aAAO,QAAQ,MAAR,CAAe;AAAA,eAAU,SAAS,MAAM,MAAN,CAAT,CAAV;AAAA,OAAf,CAAP;AACD,KAFM,CAAP;AAGD,GAJM,CAAP;AAKD","file":"Tasks.utils.js","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["import i from 'icepick';\nimport { every } from 'lodash';\n\nexport const filterBoard = (board, tasks, searchString) => {\n  // This will filter the board by the the search string\n  const queryStringArray = searchString ? searchString.split(' ') : [];\n  return i.updateIn(board, ['data', 'groups'], groups =>\n    filterGroups({groups, tasks, filterFn: (task) => {\n      return task && task.data ? every(queryStringArray, queryString => queryByString(task, queryString)) : true;\n    }})\n  )\n};\n\nexport const getAllTasks = (boardGroups) =>{\n  let tasks = [];\n  boardGroups.forEach(group => tasks = tasks.concat(group.tasks))\n  return tasks;\n};\n\nfunction queryByString(item, queryString){\n  /****************************************************\n  This is the main query function. It takes in a string\n  and will filter the task by this string in some way\n  ****************************************************/\n  if     (queryString == 'is:complete' || queryString == 'is:!complete'){\n    return item.data.complete\n  }\n  else if(queryString == 'is:incomplete'){\n    return !item.data.complete\n  }\n  // Assignee Query\n  else if(queryString.startsWith('assignee:')){\n    const assignee = queryString.replace('assignee:', '');\n    return item.data.users.find(user => user.stub == assignee);\n  }\n  // Filter by the string itself (case independent)\n  else if(queryString && queryString.length > 0){\n    return new RegExp(queryString, 'i').test(item.data.name)\n  }\n  else{\n    return true;\n  }\n}\n\nfunction filterGroups({groups, tasks, filterFn}){\n  return groups.map(group => {\n    return i.updateIn(group, ['tasks'], taskIds => {\n      return taskIds.filter(taskId => filterFn(tasks[taskId]))\n    })\n  })\n}\n"]}