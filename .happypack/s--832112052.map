{"version":3,"sources":["app\\renderer\\main\\modules\\StringFilter\\StringFilter.utils.js"],"names":[],"mappings":";;;;;;;AAAA;;AAEO,IAAM,0CAAiB,SAAjB,cAAiB,CAAC,WAAD,EAAc,YAAd,EAA4B,YAA5B,EAA4C;AACxE,MAAG,gBAAgB,EAAnB,EAAsB;AACpB;AACA,WAAO,YAAY,SAAZ,CAAsB;AAAA,aAAgB,aAAa,KAAb,IAAsB,EAAtB,GAA2B,mBAAmB,YAAnB,EAAiC,aAAa,KAA9C,CAA3B,GAAkF,KAAlG;AAAA,KAAtB,KAAkI,CAAC,CAA1I;AACD,GAHD,MAII;AACF;AACA,WAAO,mBAAmB,YAAnB,EAAiC,YAAjC,CAAP;AACD;AACF,CATM;;AAWA,IAAM,gCAAY,SAAZ,SAAY,OAAyD;AAAA,MAAvD,QAAuD,QAAvD,QAAuD;AAAA,MAA7C,KAA6C,QAA7C,KAA6C;AAAA,MAAtC,KAAsC,QAAtC,KAAsC;AAAA,MAA/B,WAA+B,QAA/B,WAA+B;AAAA,MAAlB,YAAkB,QAAlB,YAAkB;;AAChF;;;;;;;;;;;;;;;;;;;;AAsBA,MAAI,kBAAkB,KAAtB;AACA,cAAY,OAAZ,CAAoB,wBAAgB;AAAE,sBAAkB,YAAY,eAAZ,EAA6B,aAAa,KAA1C,EAAiD,EAAjD,CAAlB;AAAwE,GAA9G,EAxBgF,CAwBiC;AACjH;AACA,MAAG,eAAH,EAAmB;AACjB,sBAAkB,eAAkB,eAAlB,SAAqC,YAArC,GAAsD,eAAxE;AACD,GAFD,MAEM,IAAG,YAAH,EAAgB;AACpB,sBAAkB,YAAlB;AACD;AACD,WAAS,wBAAQ,MAAR,CAAe,KAAf,EAAsB,eAAtB,CAAT;AACD,CAhCM;;AAkCP,SAAS,kBAAT,CAA4B,UAA5B,EAAwC,IAAxC,EAA6C;AAC3C,SAAO,cAAc,WAAW,MAAX,GAAoB,CAAlC,GAAsC,WAAW,KAAX,CAAiB,IAAI,MAAJ,CAAW,aAAW,IAAX,GAAgB,UAA3B,CAAjB,CAAtC,GAAiG,KAAxG;AACD;AACD,SAAS,WAAT,CAAqB,UAArB,EAAiC,IAAjC,EAAuC,OAAvC,EAA+C;AAC7C,SAAO,cAAc,WAAW,MAAX,GAAoB,CAAlC,GAAsC,WAAW,OAAX,CAAmB,IAAI,MAAJ,CAAW,aAAW,IAAtB,CAAnB,EAAgD,OAAhD,CAAtC,GAAiG,UAAxG;AACD","file":"StringFilter.utils.js","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["import { actions } from 'react-redux-form';\n\nexport const isFilterActive = (filterArray, filterString, searchString) =>{\n  if(filterString == ''){\n    // If none of the other keys in this filter are active, set this one to active\n    return filterArray.findIndex(filterObject => filterObject.value != '' ? stringContainsWord(searchString, filterObject.value) : false) == -1;\n  }\n  else{\n    // Check if the search string contains the filterString\n    return stringContainsWord(searchString, filterString)\n  }\n};\n\nexport const addFilter = ({dispatch, model, value, filterArray, filterString}) => {\n  /****************************************************\n  This will add the filterString to the model. It will\n  remove the strings in the filter Array which are not\n  active.\n\n  model: the search string model\n  value: the search string value\n  filterArray: the array of filter options:\n    [{\n      text: 'Status: Complete',\n      value: 'is:complete',\n    },{\n      text: 'Status: Incomplete',\n      value: 'is:incomplete',\n    },{\n      text: 'Status: All',\n      value: ''\n    }];\n  filterString: the selected string:\n    Status: Complete\n\n  ****************************************************/\n  let newSearchString = value;\n  filterArray.forEach(filterObject => { newSearchString = replaceWord(newSearchString, filterObject.value, '') }); // Clear the search string\n  // Add the new filterString\n  if(newSearchString){\n    newSearchString = filterString ? `${newSearchString} ${filterString}` : newSearchString;\n  }else if(filterString){\n    newSearchString = filterString;\n  }\n  dispatch(actions.change(model, newSearchString))\n};\n\nfunction stringContainsWord(fullString, word){\n  return fullString && fullString.length > 0 ? fullString.match(new RegExp('(^|\\\\s+)'+word+'(\\\\s+|$)')) : false;\n}\nfunction replaceWord(fullString, word, newWord){\n  return fullString && fullString.length > 0 ? fullString.replace(new RegExp('(^|\\\\s+)'+word), newWord) : fullString;\n}\n"]}