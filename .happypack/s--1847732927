'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = undefined;

var _index = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\redbox-react\\lib\\index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-catch-errors\\lib\\index.js');

var _index4 = _interopRequireDefault(_index3);

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index5 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-hmr\\lib\\index.js');

var _index6 = _interopRequireDefault(_index5);

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _projects = require('app/shared/actions/projects.js');

var ProjectsActions = _interopRequireWildcard(_projects);

var _TasksActions = require('app/renderer/main/modules/Tasks/Tasks.actions.js');

var TasksActions = _interopRequireWildcard(_TasksActions);

var _lodash = require('lodash');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ProjectSettingsPage = require('../ProjectSettingsPage.css');

var _ProjectSettingsPage2 = _interopRequireDefault(_ProjectSettingsPage);

var _reactReduxForm = require('react-redux-form');

var _ProgressButton = require('app/renderer/main/components/Buttons/ProgressButton/ProgressButton');

var _ProgressButton2 = _interopRequireDefault(_ProgressButton);

var _TaskLabelsEdit = require('app/renderer/main/modules/Tasks/TaskLabelsEdit/TaskLabelsEdit.jsx');

var _TaskLabelsEdit2 = _interopRequireDefault(_TaskLabelsEdit);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {},
  _component2: {}
};

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/pages/ProjectPage/ProjectSettingsPage/ProjectSettingsTasksPage/ProjectSettingsTasksPage.jsx',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/pages/ProjectPage/ProjectSettingsPage/ProjectSettingsTasksPage/ProjectSettingsTasksPage.jsx',
  components: _components,
  locals: [],
  imports: [_react3.default, _index2.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2(_CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
  };
} // Container Core


// Container Actions


// Component Core


// Styles


// Sub Components


///////////////////////////////// COMPONENT /////////////////////////////////

var TasksPanel = _wrapComponent('_component')(_react3.default.createClass({
  displayName: 'TasksPanel',
  onMount: function onMount(nextProps, prevProps) {
    if (!prevProps || nextProps.board.data._id !== prevProps.board.data._id) {
      nextProps.dispatch(_reactReduxForm.actions.load(nextProps.boardModel + '.forms.labels', nextProps.board.data.labels));
    }
  },
  componentWillMount: function componentWillMount() {
    this.onMount(this.props);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this.onMount(nextProps, this.props);
  },
  submit: function submit() {
    var _this = this;

    // Merge props back to the main data
    this.props.dispatch(_reactReduxForm.actions.change(this.props.boardModel + '.data.labels', this.props.board.forms.labels));
    // Save the board
    setTimeout(function () {
      _this.props.tasksActions.updateBoard({
        board: _this.props.board.data
      });
    }, 1);
  },
  render: function render() {
    var _props = this.props;
    var boardModel = _props.boardModel;
    var board = _props.board;

    if ((0, _lodash.has)(board, 'forms.labels')) {
      return _react3.default.createElement(
        'div',
        { className: _ProjectSettingsPage2.default.panel },
        _react3.default.createElement(
          'h3',
          null,
          'Task Label Settings'
        ),
        _react3.default.createElement(
          'p',
          null,
          'Labels are used to classify tasks. If you delete a label, it will be removed from all existing tasks.'
        ),
        _react3.default.createElement(_TaskLabelsEdit2.default, { model: boardModel + '.forms.labels', value: board.forms.labels }),
        _react3.default.createElement('br', null),
        _react3.default.createElement(
          'div',
          { className: 'layout-row' },
          _react3.default.createElement('div', { className: 'flex' }),
          _react3.default.createElement(
            _ProgressButton2.default,
            {
              className: 'primary',
              onClick: this.submit,
              loading: board.savePending },
            'Save Labels'
          )
        )
      );
    } else {
      return null;
    }
  }
}));

var Component = exports.Component = _wrapComponent('_component2')(_react3.default.createClass({
  displayName: 'Component',
  onMount: function onMount(nextProps, prevProps) {
    if (!prevProps || nextProps.projectId !== prevProps.projectId) {
      nextProps.tasksActions.getBoard({
        projectId: nextProps.projectId
      });
    }
  },
  componentWillMount: function componentWillMount() {
    this.onMount(this.props);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this.onMount(nextProps, this.props);
  },
  render: function render() {
    var _props2 = this.props;
    var boardModel = _props2.boardModel;
    var board = _props2.board;
    var dispatch = _props2.dispatch;
    var tasksActions = _props2.tasksActions;

    return _react3.default.createElement(
      'div',
      null,
      (0, _lodash.has)(board, 'data.labels') ? _react3.default.createElement(TasksPanel, {
        boardModel: boardModel,
        board: board,
        dispatch: dispatch,
        tasksActions: tasksActions
      }) : null
    );
  }
}));

///////////////////////////////// CONTAINER /////////////////////////////////

function mapStateToProps(_ref, _ref2) {
  var tasks = _ref.tasks;
  var projects = _ref.projects;
  var params = _ref2.params;

  var projectId = params.stub;
  var projectBoards = tasks.projects && tasks.projects[projectId] ? tasks.projects[projectId].boards : null;
  var board = projectBoards ? tasks.boards[projectBoards[0]] : {};
  var boardModel = projectBoards ? 'tasks.boards.' + projectBoards[0] : '';
  return {
    projectId: projectId,
    board: board,
    boardModel: boardModel
  };
}

function mapDispatchToProps(dispatch) {
  return {
    dispatch: dispatch,
    tasksActions: (0, _redux.bindActionCreators)(TasksActions, dispatch)
  };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Component);