{"version":3,"sources":["app\\renderer\\main\\modules\\Files\\PreviewFile\\PreviewPcb\\PreviewPcb.jsx"],"names":[],"mappings":"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","file":"PreviewPcb.jsx","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["import React from 'react';\nimport { clone, forEachRight, find, has } from 'lodash';\nimport previewPcbService from './PreviewPcbService.js';\nimport classes from './PreviewPcb.css';\n\nimport LoadingOverlay from 'app/renderer/main/components/Loading/LoadingOverlay/LoadingOverlay.jsx';\n\nexport const Viewer = React.createClass({\n  getInitialState () {\n    return {\n      flipped: null,\n    }\n  },\n  viewerInstance: null,\n\n  // Mounting\n  onMount (nextProps, prevProps) {\n    if(!prevProps || (nextProps.data != prevProps.data && nextProps.name != prevProps.name)){\n      setTimeout(this.init(nextProps), 1); // Timeout so refs can init\n    }\n  },\n  componentDidMount() { this.onMount(this.props) },\n  componentWillReceiveProps(nextProps) { this.onMount(nextProps, this.props)},\n\n  componentWillUnmount(){\n    previewPcbService.deregister(this.viewerInstance);\n  },\n  init(props) {\n    const { data, name } = props;\n\n    // Deregister any existing viewers\n    if(this.viewerInstance){\n      previewPcbService.deregister(this.viewerInstance);\n    }\n\n    const file = {\n      name: name,\n      data: data\n    };\n\n    this.viewerInstance = previewPcbService.register();\n    const layers = [file].map(this.viewerInstance.parse);\n    errorMessages(layers);\n\n    // If we still have layers, display them\n    if(layers.length > 0){\n      // Push on the back layer if it is a pcb/brd file\n      if(!layers[0].isGerber){\n        layers[0].side = 2;\n        var backLayer = clone(layers[0], true);\n        backLayer.boardFlipped = true;\n        backLayer.side = 1;\n        layers.push(backLayer);\n      }\n\n      this.viewerInstance.init(layers, this.refs.canvas, previewPcbService.activeInstances);\n      // Flip the board if we only have bottom layers\n      if(!find(layers, 'side', 2)){\n        this.flip(true);\n      }\n    }\n    else{\n      previewer.type = 'other';\n    }\n  },\n  flip(status){\n    const flipped = status ? status : !this.state.flipped;\n    this.setState({flipped: flipped})\n    previewPcbService.activeInstances.forEach(instance => {\n      instance.flip(flipped);\n    })\n  },\n  render() {\n    return <div ref=\"canvas\" className={classes.canvas + ' layout-column flex'}></div>\n  }\n});\n\nexport default React.createClass({\n  componentWillReceiveProps(nextProps, prevProps) {\n    if(!nextProps.fileData){\n      nextProps.downloadFn({\n        projectId  : nextProps.fileMeta.project._id,\n        fileId     : nextProps.fileMeta.fileId,\n        revisionId : nextProps.fileMeta.revisionId\n      })\n    }\n  },\n  render() {\n    const { fileData, fileMeta } = this.props;\n    if(fileData && fileData.data){\n      return <Viewer data={fileData.data} name={fileMeta.name} />\n    }\n    else{\n      return <div className=\"rel-box flex\"><LoadingOverlay show={true}></LoadingOverlay></div>\n    }\n  }\n});\n\n\n\nfunction errorMessages(layers){\n  // Pop Error messages and remove bad layers\n  forEachRight(layers, function(layer, index){\n      if(layer.error){\n        toast(layer.error);\n        layers.splice(index, 1);\n      }\n      else if(layer.isGerber && layer.cmds.length === 0){\n        toast('Could not parse file.');\n        layers.splice(index, 1);\n      }\n  });\n}\n"]}