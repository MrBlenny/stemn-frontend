{"version":3,"sources":["app\\renderer\\main\\modules\\Mentions\\Mentions.utils.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;;;AAEO,IAAM,4CAAkB,SAAlB,eAAkB,CAAC,IAAD,EAAU;AACvC;AACA;AACA;AACA,MAAM,YAAY,KAAK,KAAL,CAAW,GAAX,CAAlB;AACA,MAAG,UAAU,MAAV,IAAoB,CAAvB,EAAyB;AAAA,oCACoB,SADpB;;AAAA,QAChB,QADgB;AAAA,QACN,WADM;AAAA,QACO,SADP;;AAEvB,QAAG,sBAAO,QAAP,KAAoB,sBAAO,SAAP,CAAvB,EAAyC;AACvC,aAAO,IAAP;AACD,KAFD,MAGI;AACF,aAAO,KAAP;AACD;AACF,GARD,MASI;AACF,WAAO,KAAP;AACD;AACF,CAjBM;;AAmBA,IAAM,8CAAmB,SAAnB,gBAAmB,CAAC,OAAD,EAAa;AAC3C,gBAAY,QAAQ,OAApB,UAAgC,QAAQ,QAAxC,SAAoD,QAAQ,WAA5D,SAA2E,QAAQ,SAAnF;AACD,CAFM;;AAKA,IAAM,wCAAgB,SAAhB,aAAgB,CAAC,IAAD,EAAU;AACrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AACA,MAAM,cAAc,OAAO,KAAK,KAAL,CAAW,uGAAX,CAAP,GAA6H,EAAjJ;AACA,MAAM,WAAW,EAAjB;AACA,MAAG,eAAe,YAAY,MAAZ,GAAqB,CAAvC,EAAyC;AACvC,gBAAY,OAAZ,CAAoB,mBAAS;AAC3B,UAAM,UAAU,QAAQ,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsB,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,CAAhB,CAD2B,CAC0B;AACrD,UAAM,aAAa,QAAQ,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsB,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,CAAnB,CAF2B,CAE6B;AACxD,UAAG,gBAAgB,UAAhB,CAAH,EAA+B;AAAA,gCACc,WAAW,KAAX,CAAiB,GAAjB,CADd;;AAAA;;AAAA,YACtB,QADsB;AAAA,YACZ,WADY;AAAA,YACC,SADD;;AAE7B,iBAAS,IAAT,CAAc;AACZ,0BADY;AAEZ,4BAFY;AAGZ,kCAHY;AAIZ;AAJY,SAAd;AAMD;AACF,KAZD;AAaD;AACD,SAAO,QAAP;AACD,CAtDM;;AAwDA,IAAM,0DAAyB,SAAzB,sBAAyB,CAAC,WAAD,EAAc,gBAAd,EAAmC;AACvE;AACA,MAAM,2BAA2B,iBAAiB,GAAjB,CAAqB;AAAA,WAAW,QAAQ,QAAnB;AAAA,GAArB,CAAjC;AACA;AACA,SAAO,YAAY,MAAZ,CAAmB,UAAC,OAAD;AAAA,WAAa,yBAAyB,OAAzB,CAAiC,QAAQ,QAAzC,KAAsD,CAAC,CAApE;AAAA,GAAnB,CAAP;AACD,CALM;;AAOA,IAAM,gDAAoB,SAApB,iBAAoB,CAAC,IAAD,EAAO,QAAP,EAAoB;AACnD,MAAI,UAAU,QAAQ,EAAtB;AACA,MAAG,YAAY,SAAS,MAAT,GAAkB,CAAjC,EAAmC;AACjC,aAAS,OAAT,CAAiB,mBAAW;AAC1B,gBAAU,QAAQ,MAAR,OAAkB,QAAQ,MAAR,GAAiB,CAAjB,GAAqB,GAArB,GAA2B,EAA7C,IAAkD,iBAAiB,OAAjB,CAAlD,CAAV;AACD,KAFD;AAGD;AACD,SAAO,OAAP;AACD,CARM","file":"Mentions.utils.js","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["import isUuid from '../../../../shared/helpers/isUuid.js';\n\nexport const validateMention = (href) => {\n  // mention should be of the form 'entityId:entityType:mentionId'\n  // Example: '47db55af7f342380174e228:user:cb4e8fac7fe980b53da95624'\n  // Boths ids should be 24 characters.\n  const hrefSplit = href.split(':');\n  if(hrefSplit.length == 3){\n    const [entityId, mentionType, mentionId] = hrefSplit;\n    if(isUuid(entityId) && isUuid(mentionId)){\n      return true\n    }\n    else{\n      return false\n    }\n  }\n  else{\n    return false\n  }\n}\n\nexport const getMentionString = (mention) => {\n  return `@[${mention.display}](${mention.entityId}:${mention.mentionType}:${mention.mentionId})`\n}\n\n\nexport const parseMentions = (text) => {\n  /*\n  text = text.match(/\n      (                           // wrap whole match in $1\n          \\[\n          (\n              (?:\n                  \\[[^\\]]*\\]      // allow brackets nested one level\n                  |\n                  [^\\[\\]]         // or anything else\n              )*\n          )\n          \\]\n          \\(                      // literal paren\n          [ \\t]*\n          ()                      // no id, so leave $3 empty\n          <?(                     // href = $4\n              (?:\n                  \\([^)]*\\)       // allow one level of (correctly nested) parens (think MSDN)\n                  |\n                  [^()\\s]\n              )*?\n          )>?\n          [ \\t]*\n          (                       // $5\n              (['\"])              // quote char = $6\n              (.*?)               // Title = $7\n              \\6                  // matching quote\n              [ \\t]*              // ignore any spaces/tabs between closing quote and )\n          )?                      // title is optional\n          \\)\n      )\n  /g);\n  */\n\n  // Get the markdown links\n  const mentionsRaw = text ? text.match(/(\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]\\([ \\t]*()<?((?:\\([^)]*\\)|[^()\\s])*?)>?[ \\t]*((['\"])(.*?)\\6[ \\t]*)?\\))/g) : [];\n  const mentions = [];\n  if(mentionsRaw && mentionsRaw.length > 0){\n    mentionsRaw.forEach(mention=>{\n      const display = mention.split('[')[1].split(']')[0]; // Get the name (from between the square brackets)\n      const infoString = mention.split('(')[1].split(')')[0]; // Get the info (from between the standard brackets)\n      if(validateMention(infoString)){\n        const [entityId, mentionType, mentionId] = infoString.split(':');\n        mentions.push({\n          display,\n          entityId,\n          mentionType,\n          mentionId\n        })\n      }\n    })\n  }\n  return mentions;\n}\n\nexport const removeExistingMentions = (newMentions, existingMentions) => {\n  // Create an array of existing mention entity Ids\n  const existingMentionEntityIds = existingMentions.map(mention => mention.entityId)\n  // Make sure new mentions do not already exist\n  return newMentions.filter((mention) => existingMentionEntityIds.indexOf(mention.entityId) == -1);\n}\n\nexport const addMentionsToText = (text, mentions) => {\n  let textNew = text || '';\n  if(mentions && mentions.length > 0){\n    mentions.forEach(mention => {\n      textNew = textNew.concat(`${textNew.length > 0 ? ' ' : ''}${getMentionString(mention)}`)\n    })\n  }\n  return textNew\n}\n"]}