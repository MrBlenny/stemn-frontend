{"version":3,"sources":["app\\renderer\\main\\components\\Buttons\\ProgressButton\\ProgressButton.jsx"],"names":[],"mappings":"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","file":"ProgressButton.jsx","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["import React from 'react';\n\n// Styles\nimport classNames from 'classnames';\nimport classes from './ProgressButton.css';\n\n\nexport const AnimateSvg = React.createClass({\n  svgEl: '',\n  render() {\n    const { children, draw } = this.props;\n    const newProps = {\n      ref: 'svg'\n    };\n    if(!this.svgEl && this.refs.svg){\n      this.svgEl = new SVGEl(this.refs.svg)\n    }\n    if(this.svgEl){\n      this.svgEl.draw(draw)\n    }\n    return React.cloneElement(children, newProps)\n  }\n});\n\nexport default React.createClass({\n  getInitialState () {\n    return {\n      status: '',\n      disabled: false,\n      drawLoading: 0,\n      drawSuccess: 0,\n    }\n  },\n  componentWillReceiveProps(nextProps) {\n    const prevProps = this.props;\n\n    // If we just began loading:\n    if(nextProps.loading && (!prevProps || !prevProps.loading)){\n      this.startLoading();\n    }\n    // If we finished loading\n    else if(prevProps && prevProps.loading && !nextProps.loading){\n      this.loadingComplete();\n    }\n  },\n  partialLoadTimeout: null,\n  successTimeout: null,\n  successIconTimeout: null,\n  resetTimeout: null,\n  clearTimeouts() {\n    clearTimeout(this.partialLoadTimeout);\n    clearTimeout(this.successTimeout);\n    clearTimeout(this.successIconTimeout);\n    clearTimeout(this.resetTimeout);\n  },\n  componentWillUnmount(){\n    this.clearTimeouts();\n  },\n  startLoading() {\n    this.clearTimeouts();\n    this.setState({\n      status: 'loading',\n      disabled: true ,\n      drawLoading: 0,\n      drawSuccess: 0\n    });\n    this.partialLoadTimeout = setTimeout(()=>{this.setState({drawLoading: 0.7})}, 100);\n  },\n  loadingComplete() {\n    this.clearTimeouts();\n    this.setState({ drawLoading: 1 });\n\n    this.successTimeout = setTimeout(() => {\n      this.setState({ status: 'success'});\n      this.successIconTimeout = setTimeout(() => {\n        this.setState({drawSuccess: 1})\n      }, 100)\n      this.resetTimeout = setTimeout(() => {\n        this.setState({ status: '', disabled: false, drawLoading: 0 });\n      }, 2000)\n    }, 700)\n  },\n  render() {\n    const { children, onClick, loading, className } = this.props;\n    const { status, disabled, drawLoading, drawSuccess } = this.state;\n\n\n    const Progress = (\n      <svg className={classes.progressCircle} width=\"40\" height=\"40\" viewBox=\"0 0 40 40\">\n        <path d=\"m1.5,20c0,-10.22099 8.27901,-18.5 18.5,-18.5c10.22099,0 18.5,8.27901 18.5,18.5c0,10.22099 -8.27901,18.5 -18.5,18.5c-10.22099,0 -18.5,-8.27901 -18.5,-18.5z\"/>\n      </svg>\n    )\n    const Checkmark = (\n      <svg className={classes.checkmark} width=\"40\" height=\"40\" viewBox=\"0 0 70 70\">\n        <path d=\"m31.5,46.5l15.3,-23.2\"/>\n        <path d=\"m31.5,46.5l-8.5,-7.1\"/>\n      </svg>\n    )\n    const Cross = (\n      <svg className={classes.cross} width=\"40\" height=\"40\" viewBox=\"0 0 70 70\">\n        <path d=\"m35,35l-9.3,-9.3\"/>\n        <path d=\"m35,35l9.3,9.3\"/>\n        <path d=\"m35,35l-9.3,9.3\"/>\n        <path d=\"m35,35l9.3,-9.3\"/>\n      </svg>\n    )\n\n    return (\n      <div className={classNames(\n          classes.progressButton, className,\n          {[classes.loading] : status == 'loading'},\n          {[classes.error]   : status == 'error'},\n          {[classes.success] : status == 'success'},\n        )}>\n        <button onClick={() => {if(!disabled){onClick()}}}><span>{children}</span></button>\n        <AnimateSvg draw={drawLoading}>{Progress}</AnimateSvg>\n        <AnimateSvg draw={drawSuccess}>{Checkmark}</AnimateSvg>\n        <AnimateSvg>{Cross}</AnimateSvg>\n      </div>\n    );\n  }\n});\n\n\n////////////////////////////////////////////////////////////\n\nfunction SVGEl( el ) {\n  this.el = el;\n  // the path elements\n  this.paths = [].slice.call( this.el.querySelectorAll( 'path' ) );\n  // we will save both paths and its lengths in arrays\n  this.pathsArr = new Array();\n  this.lengthsArr = new Array();\n  this._init();\n}\n\nSVGEl.prototype._init = function() {\n  var self = this;\n  this.paths.forEach( function( path, i ) {\n    self.pathsArr[i] = path;\n    path.style.strokeDasharray = self.lengthsArr[i] = path.getTotalLength();\n  } );\n  // undraw stroke\n  this.draw(0);\n}\n\nSVGEl.prototype.draw = function( val ) {\n  for( var i = 0, len = this.pathsArr.length; i < len; ++i ){\n    this.pathsArr[ i ].style.strokeDashoffset = this.lengthsArr[ i ] * ( 1 - val );\n  }\n}\n"]}