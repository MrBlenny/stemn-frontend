{"version":3,"sources":["app\\renderer\\main\\modules\\Files\\PreviewFile\\PreviewFile.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AAGA;;IAAY,Y;;AAMZ;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAtBA;;;AAIA;;;AAGA;;;AAGA;;;AAIA;;;AAWA;;;AAIO,IAAM,6DAAY,gBAAM,WAAN,CAAkB;AAAA;AACzC,QADyC,oBAChC;AAAA,iBACyC,KAAK,KAD9C;AAAA,QACA,IADA,UACA,IADA;AAAA,QACM,QADN,UACM,QADN;AAAA,QACgB,OADhB,UACgB,OADhB;AAAA,QACyB,YADzB,UACyB,YADzB;;AAEP,QAAM,YAAe,QAAQ,GAAvB,SAA8B,KAAK,MAAnC,SAA6C,KAAK,UAAxD;;AAEA,QAAM,aAAa,SAAb,UAAa,GAAM;AACvB,UAAM,aAAa,qCAAc,KAAK,SAAnB,CAAnB;AACA,UAAG,cAAc,QAAd,IAA0B,cAAc,KAA3C,EAAiD;AAC/C,eAAO,sDAAY,WAAW,SAAvB,EAAkC,UAAU,IAA5C,EAAkD,UAAU,QAA5D,EAAsE,YAAY,aAAa,OAA/F,GAAP;AACD,OAFD,MAGK,IAAG,cAAc,MAAjB,EAAwB;AAC3B,eAAO,uDAAa,WAAW,SAAxB,EAAmC,UAAU,IAA7C,EAAmD,UAAU,QAA7D,EAAuE,YAAY,aAAa,OAAhG,GAAP;AACD,OAFI,MAGA,IAAG,cAAc,UAAjB,EAA4B;AAC/B,eAAO,sDAAY,WAAW,SAAvB,EAAkC,UAAU,IAA5C,GAAP;AACD,OAFI,MAGA,IAAG,cAAc,QAAjB,EAA0B;AAC7B,eAAO;AAAA;AAAA;AAAA;AAAA,SAAP;AACD,OAFI,MAGA,IAAG,cAAc,OAAjB,EAAyB;AAC5B,eAAO,wDAAc,SAAS,OAAvB,EAAgC,UAAU,IAA1C,GAAP;AACD,OAFI,MAGA,IAAG,cAAc,KAAjB,EAAuB;AAC1B,eAAO,sDAAY,WAAW,SAAvB,EAAkC,UAAU,IAA5C,EAAkD,UAAU,QAA5D,EAAsE,YAAY,aAAa,OAA/F,GAAP;AACD,OAFI,MAGD;AACF,eACE;AAAA;AAAA,YAAK,WAAU,+CAAf;AACE,iDAAK,4BAAL,EAAyB,OAAO,EAAC,OAAO,OAAR,EAAhC,GADF;AAEE;AAAA;AAAA,cAAK,WAAU,0BAAf,EAA0C,OAAO,EAAC,WAAW,MAAZ,EAAjD;AAAA;AAAA;AAFF,SADF;AAMD;AACF,KA5BD;AA6BA,WACE;AAAA;AAAA,QAAK,WAAU,4BAAf;AACG;AADH,KADF;AAKD;AAvCwC,CAAlB,CAAZ,CAAN;;AA2CP;;AAEA,SAAS,eAAT,cAAmD;AAAA,MAAzB,KAAyB,QAAzB,KAAyB;AAAA,MAAhB,OAAgB,SAAhB,OAAgB;AAAA,MAAP,IAAO,SAAP,IAAO;;AACjD,MAAM,WAAc,QAAQ,GAAtB,SAA6B,KAAK,MAAlC,SAA4C,KAAK,UAAvD;AACA,SAAO;AACL,cAAU,MAAM,QAAN,CAAe,QAAf;AADL,GAAP;AAGD;;AAED,SAAS,kBAAT,CAA4B,QAA5B,EAAsC;AACpC,SAAO;AACL,kBAAc,+BAAmB,YAAnB,EAAiC,QAAjC;AADT,GAAP;AAGD;;kBAEc,yBAAQ,eAAR,EAAyB,kBAAzB,EAA6C,SAA7C,C","file":"PreviewFile.jsx","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["// Container Core\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\n// Container Actions\nimport * as FilesActions from '../Files.actions.js';\n\n// Component Core\nimport React from 'react';\n\n// Styles\nimport classNames from 'classnames';\nimport classes from './PreviewFile.css';\n\n// Sub Components\nimport PreviewCode        from './PreviewCode/PreviewCode'\nimport PreviewPcb         from './PreviewPcb/PreviewPcb'\nimport PreviewPdf         from './PreviewPdf/PreviewPdf'\nimport PreviewImage       from './PreviewImage/PreviewImage'\nimport PreviewCad         from './PreviewCad/PreviewCad'\nimport LoadingOverlay     from 'app/renderer/main/components/Loading/LoadingOverlay/LoadingOverlay.jsx';\nimport laptopSpanner      from 'app/renderer/assets/images/pure-vectors/laptop-spanner.svg';\nimport { getViewerType }  from './PreviewFile.utils.js'\n\n\n///////////////////////////////// COMPONENT /////////////////////////////////\n\n\n\nexport const Component = React.createClass({\n  render() {\n    const {file, fileData, project, filesActions} = this.props;\n    const previewId = `${project._id}-${file.fileId}-${file.revisionId}`;\n\n    const getPreview = () => {\n      const viewerType = getViewerType(file.extension);\n      if(viewerType == 'gerber' || viewerType == 'pcb'){\n        return <PreviewPcb previewId={previewId} fileMeta={file} fileData={fileData} downloadFn={filesActions.getFile} />\n      }\n      else if(viewerType == 'code'){\n        return <PreviewCode previewId={previewId} fileMeta={file} fileData={fileData} downloadFn={filesActions.getFile}/>\n      }\n      else if(viewerType == 'autodesk'){\n        return <PreviewCad previewId={previewId} fileMeta={file} />\n      }\n      else if(viewerType == 'google'){\n        return <div>Google</div>\n      }\n      else if(viewerType == 'image'){\n        return <PreviewImage project={project} fileMeta={file} />\n      }\n      else if(viewerType == 'pdf'){\n        return <PreviewPdf previewId={previewId} fileMeta={file} fileData={fileData} downloadFn={filesActions.getFile}/>\n      }\n      else{\n        return (\n          <div className=\"layout-column layout-align-center-center flex\">\n            <img src={laptopSpanner} style={{width: '100px'}}/>\n            <div className=\"text-title-5 text-center\" style={{marginTop: '10px'}}>Cannot preview this file.</div>\n          </div>\n        )\n      }\n    }\n    return (\n      <div className=\"layout-column flex rel-box\">\n        {getPreview()}\n      </div>\n    );\n  }\n});\n\n\n///////////////////////////////// CONTAINER /////////////////////////////////\n\nfunction mapStateToProps({files}, {project, file}) {\n  const cacheKey = `${project._id}-${file.fileId}-${file.revisionId}`;\n  return {\n    fileData: files.fileData[cacheKey]\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    filesActions: bindActionCreators(FilesActions, dispatch),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Component);\n"]}