{"version":3,"sources":["app\\renderer\\main\\pages\\ProjectFeedPage\\ProjectFeedPage.jsx"],"names":[],"mappings":"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","file":"ProjectFeedPage.jsx","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["// Container Core\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\n// Container Actions\nimport * as SyncTimelineActions from 'app/shared/modules/SyncTimeline/SyncTimeline.actions.js';\n\n// Component Core\nimport React from 'react';\n\n// Styles\nimport classNames from 'classnames';\nimport feedPageStyles from './ProjectFeedPage.css';\n\n// Sub Components\nimport { has }                  from 'lodash';\nimport { Link }                 from 'react-router';\nimport Popover                  from 'app/renderer/assets/other/react-popup';\nimport Timeline                 from 'app/renderer/main/modules/Timeline/Timeline.jsx';\nimport SidebarTimeline          from 'app/shared/modules/SyncTimeline/SidebarTimeline/SidebarTimeline.jsx';\nimport ContentSidebar           from 'app/renderer/main/components/ContentSidebar';\nimport cloudLocked              from 'app/renderer/assets/images/pure-vectors/cloud-locked.svg';\nimport timeline                 from 'app/renderer/assets/images/pure-vectors/timeline.svg';\n\nimport ProjectFeedPageCommit    from './ProjectFeedPageCommit/ProjectFeedPageCommit.jsx'\nimport ProjectFeedPageRevision  from './ProjectFeedPageRevision/ProjectFeedPageRevision.jsx'\n\n///////////////////////////////// COMPONENT /////////////////////////////////\n\nconst eventComponentMap = {\n  commit   : (item, project) => (<ProjectFeedPageCommit item={item} project={project}/>),\n  revision : (item, project) => (<ProjectFeedPageRevision item={item} project={project}/>),\n}\n\nconst getEventComponent = (item, project) => {\n  return item && item.event && eventComponentMap[item.event]\n    ? eventComponentMap[item.event](item, project)\n    : (\n    <div className=\"layout-column layout-align-center-center flex text-title-4 text-center\">\n      <img src={timeline} style={{width: '100px'}}/>\n      <div>No timeline event selected.</div>\n    </div>)\n};\n\nexport const Component = React.createClass({\n\n  // Mounting\n  onMount(nextProps, prevProps){\n    if(nextProps.project && nextProps.project.data && nextProps.project.data.remote.connected){\n      if(!prevProps || nextProps.project.data._id !== prevProps.project.data._id){\n        nextProps.syncTimelineActions.fetchTimeline({projectId: nextProps.project.data._id})\n      }\n    }\n    if(has(nextProps, 'location.query.item')){\n      if(!has(prevProps, 'location.query.item') || nextProps.location.query.item != prevProps.location.query.item){\n        const itemFromQueryParams = this.props.timeline.data.find(item => item._id == nextProps.location.query.item);\n        if(itemFromQueryParams){this.selectTimelineItem(itemFromQueryParams)}\n      }\n    }\n  },\n  componentWillMount() { this.onMount(this.props) },\n  componentWillReceiveProps(nextProps) { this.onMount(nextProps, this.props)},\n\n  selectTimelineItem(item){\n    this.props.syncTimelineActions.selectTimelineItem({\n      projectId: this.props.project.data._id,\n      selected : item\n    })\n  },\n\n  deselect(){\n    this.props.syncTimelineActions.deselect({\n      projectId: this.props.project.data._id\n    })\n  },\n\n  refresh(){\n    this.props.syncTimelineActions.fetchTimeline({\n      projectId: this.props.project.data._id\n    })\n  },\n\n  render(){\n    const { timeline, timelineModel, project, location } = this.props;\n    const baseLink = `project/${project && project.data ? project.data._id : ''}`\n\n    if(project.data.remote.connected){\n      return (\n        <div className=\"layout-column flex rel-box\">\n          <Timeline\n            items={timeline && timeline.data ? timeline.data : []}\n            selected={timeline && timeline.selected ? timeline.selected._id : ''}\n            onSelect={this.selectTimelineItem}\n          />\n          <div className=\"layout-row flex\">\n            <div className=\"layout-column\">\n              <ContentSidebar className=\"flex\">\n                <SidebarTimeline\n                  items={timeline && timeline.data ? timeline.data : []}\n                  selected={timeline && timeline.selected ? timeline.selected._id : ''}\n                  onSelect={this.selectTimelineItem}\n                  loading={timeline && timeline.data ? false : true}\n                  query={timeline && timeline.query ? timeline.query : ''}\n                  queryModel={`${timelineModel}.query`}\n                  refresh={this.refresh}\n                  deselect={this.deselect}\n                />\n              </ContentSidebar>\n            </div>\n            <div className=\"layout-column flex\">\n              {getEventComponent(timeline && timeline.selected ? timeline.selected : '', project)}\n            </div>\n          </div>\n        </div>\n      );\n    }\n    else{\n      return (\n        <div className=\"layout-column layout-align-center-center flex\">\n          <img src={cloudLocked}/>\n          <div className=\"text-title-4 text-center\">Timeline not available. Connect this project to Drive or Dropbox</div>\n          <div className=\"text-title-4 text-center link-primary\" style={{marginTop: '10px'}}><Link to={baseLink+'/settings'}>Add File Store</Link></div>\n        </div>\n      )\n    }\n  }\n})\n\n///////////////////////////////// CONTAINER /////////////////////////////////\n\nfunction mapStateToProps({syncTimeline, projects}, {params}) {\n  const project = projects.data[params.stub];\n  return {\n    timeline: syncTimeline[project.data._id],\n    timelineModel: `syncTimeline.${project.data._id}`,\n    project: project\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    syncTimelineActions: bindActionCreators(SyncTimelineActions, dispatch)\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Component);\n"]}