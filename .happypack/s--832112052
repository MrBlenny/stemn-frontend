'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addFilter = exports.isFilterActive = undefined;

var _reactReduxForm = require('react-redux-form');

var isFilterActive = exports.isFilterActive = function isFilterActive(filterArray, filterString, searchString) {
  if (filterString == '') {
    // If none of the other keys in this filter are active, set this one to active
    return filterArray.findIndex(function (filterObject) {
      return filterObject.value != '' ? stringContainsWord(searchString, filterObject.value) : false;
    }) == -1;
  } else {
    // Check if the search string contains the filterString
    return stringContainsWord(searchString, filterString);
  }
};

var addFilter = exports.addFilter = function addFilter(_ref) {
  var dispatch = _ref.dispatch;
  var model = _ref.model;
  var value = _ref.value;
  var filterArray = _ref.filterArray;
  var filterString = _ref.filterString;

  /****************************************************
  This will add the filterString to the model. It will
  remove the strings in the filter Array which are not
  active.
   model: the search string model
  value: the search string value
  filterArray: the array of filter options:
    [{
      text: 'Status: Complete',
      value: 'is:complete',
    },{
      text: 'Status: Incomplete',
      value: 'is:incomplete',
    },{
      text: 'Status: All',
      value: ''
    }];
  filterString: the selected string:
    Status: Complete
   ****************************************************/
  var newSearchString = value;
  filterArray.forEach(function (filterObject) {
    newSearchString = replaceWord(newSearchString, filterObject.value, '');
  }); // Clear the search string
  // Add the new filterString
  if (newSearchString) {
    newSearchString = filterString ? newSearchString + ' ' + filterString : newSearchString;
  } else if (filterString) {
    newSearchString = filterString;
  }
  dispatch(_reactReduxForm.actions.change(model, newSearchString));
};

function stringContainsWord(fullString, word) {
  return fullString && fullString.length > 0 ? fullString.match(new RegExp('(^|\\s+)' + word + '(\\s+|$)')) : false;
}
function replaceWord(fullString, word, newWord) {
  return fullString && fullString.length > 0 ? fullString.replace(new RegExp('(^|\\s+)' + word), newWord) : fullString;
}