'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getComment = getComment;
exports.newComment = newComment;
exports.toggleReaction = toggleReaction;
exports.newReaction = newReaction;
exports.deleteReaction = deleteReaction;
exports.startEdit = startEdit;
exports.finishEdit = finishEdit;
exports.deleteComment = deleteComment;
exports.updateComment = updateComment;

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _TasksActions = require('../Tasks/Tasks.actions.js');

var TasksActions = _interopRequireWildcard(_TasksActions);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getComment(_ref) {
  var commentId = _ref.commentId;

  return {
    type: 'COMMENTS/GET_COMMENT',
    httpPackage: {
      endpoint: 'api/v1/comments',
      url: '/api/v1/comments',
      method: 'GET',
      params: {
        'ids': commentId
      }
    },
    meta: {
      commentId: commentId
    }
  };
}

function newComment(_ref2) {
  var comment = _ref2.comment;

  return function (dispatch) {
    if (comment && comment.body && comment.body.length > 0) {
      dispatch({
        type: 'COMMENTS/NEW_COMMENT',
        payload: (0, _axios2.default)({
          url: '/api/v1/tasks/' + comment.task + '/comments',
          method: 'POST',
          data: comment
        }),
        meta: {
          taskId: comment.task
        }
      }).then(function (response) {
        dispatch(TasksActions.newEvent({
          taskId: comment.task,
          event: {
            event: 'comment',
            comment: response.value.data._id
          }
        }));
      });
    }
  };
}

function toggleReaction(_ref3) {
  var commentId = _ref3.commentId;
  var reactionType = _ref3.reactionType;

  return function (dispatch, getState) {
    var reactions = getState().comments.data[commentId].data.reactions;
    var userId = getState().auth.user._id;
    var reactionExists = reactions.find(function (reaction) {
      return reaction.owner._id == userId && reaction.type == reactionType;
    });

    if (reactionExists) {
      dispatch(deleteReaction({ commentId: commentId, reactionType: reactionType }));
    } else {
      dispatch(newReaction({ commentId: commentId, reactionType: reactionType }));
    }
  };
}

function newReaction(_ref4) {
  var commentId = _ref4.commentId;
  var reactionType = _ref4.reactionType;

  return function (dispatch) {

    var reaction = {
      type: reactionType
    };

    dispatch({
      type: 'COMMENTS/NEW_REACTION',
      http: true,
      payload: {
        url: '/api/v1/comments/' + commentId + '/reaction',
        method: 'POST',
        data: reaction
      },
      meta: {
        commentId: commentId
      }
    });
  };
}

function deleteReaction(_ref5) {
  var commentId = _ref5.commentId;
  var reactionType = _ref5.reactionType;

  return function (dispatch, getState) {
    dispatch({
      type: 'COMMENTS/DELETE_REACTION',
      http: true,
      payload: {
        url: '/api/v1/comments/' + commentId + '/reaction/' + reactionType,
        method: 'DELETE'
      },
      meta: {
        commentId: commentId,
        reactionType: reactionType,
        userId: getState().auth.user._id
      }
    });
  };
}

function startEdit(_ref6) {
  var commentId = _ref6.commentId;

  return {
    type: 'COMMENTS/START_EDIT',
    payload: {
      commentId: commentId
    }
  };
}

function finishEdit(_ref7) {
  var commentId = _ref7.commentId;

  return {
    type: 'COMMENTS/FINISH_EDIT',
    payload: {
      commentId: commentId
    }
  };
}

function deleteComment(_ref8) {
  var comment = _ref8.comment;

  return function (dispatch, getState) {
    dispatch({
      type: 'COMMENTS/DELETE',
      payload: (0, _axios2.default)({
        url: '/api/v1/comments/' + comment._id,
        method: 'DELETE'
      }),
      meta: {
        commentId: comment._id,
        taskId: comment.task
      }
    }).then(function (response) {
      // Get the eventId of the comment
      var event = getState().tasks.events[comment.task].data.find(function (event) {
        return event.comment == comment._id;
      });
      if (event) {
        dispatch(TasksActions.deleteEvent({
          taskId: comment.task,
          eventId: event._id
        }));
      }
    });
  };
}

function updateComment(_ref9) {
  var comment = _ref9.comment;

  return {
    type: 'COMMENTS/UPDATE',
    http: true,
    payload: {
      url: '/api/v1/comments/' + comment._id,
      method: 'PUT',
      data: comment
    },
    meta: {
      commentId: comment._id
    }
  };
}