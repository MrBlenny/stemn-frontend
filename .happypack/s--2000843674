'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = exports.DueDate = undefined;

var _index = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\redbox-react\\lib\\index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-catch-errors\\lib\\index.js');

var _index4 = _interopRequireDefault(_index3);

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index5 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-hmr\\lib\\index.js');

var _index6 = _interopRequireDefault(_index5);

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _TasksActions = require('../../Tasks.actions.js');

var TasksActions = _interopRequireWildcard(_TasksActions);

var _ModalActions = require('app/renderer/main/modules/Modal/Modal.actions.js');

var ModalActions = _interopRequireWildcard(_ModalActions);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _lodash = require('lodash');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _TaskListItem = require('./TaskListItem.css');

var _TaskListItem2 = _interopRequireDefault(_TaskListItem);

var _Checkbox = require('app/renderer/main/components/Input/Checkbox/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _Input = require('app/renderer/main/components/Input/Input/Input');

var _Input2 = _interopRequireDefault(_Input);

var _UserAvatars = require('app/renderer/main/components/Avatar/UserAvatars/UserAvatars.jsx');

var _UserAvatars2 = _interopRequireDefault(_UserAvatars);

var _SimpleIconButton = require('app/renderer/main/components/Buttons/SimpleIconButton/SimpleIconButton');

var _SimpleIconButton2 = _interopRequireDefault(_SimpleIconButton);

var _openInNew = require('react-icons/md/open-in-new');

var _openInNew2 = _interopRequireDefault(_openInNew);

var _PopoverMenu = require('app/renderer/main/components/PopoverMenu/PopoverMenu');

var _PopoverMenu2 = _interopRequireDefault(_PopoverMenu);

var _TaskLabelDots = require('app/renderer/main/modules/Tasks/TaskLabelDots/TaskLabelDots.jsx');

var _TaskLabelDots2 = _interopRequireDefault(_TaskLabelDots);

var _Textarea = require('app/renderer/main/components/Input/Textarea/Textarea');

var _Textarea2 = _interopRequireDefault(_Textarea);

var _UserSelect = require('app/renderer/main/components/Users/UserSelect/UserSelect.jsx');

var _UserSelect2 = _interopRequireDefault(_UserSelect);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _components = {
  _component: {},
  _component2: {}
};

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Tasks/TaskList/TaskListItem/TaskListItem.jsx',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/modules/Tasks/TaskList/TaskListItem/TaskListItem.jsx',
  components: _components,
  locals: [],
  imports: [_react3.default, _index2.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2(_CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
  };
} // Container Core


// Container Actions


// Component Core


// Styles


// Sub Components


///////////////////////////////// COMPONENT /////////////////////////////////

var DueDate = exports.DueDate = _wrapComponent('_component')(_react3.default.createClass({
  displayName: 'DueDate',
  render: function render() {
    var due = this.props.due;


    var day = 1000 * 60 * 60 * 24;
    var colorMap = [{
      period: 1 * day,
      color: 'red'
    }, {
      period: 3 * day,
      color: 'orange'
    }];
    var currentTime = (0, _moment2.default)().valueOf();
    var dueTime = (0, _moment2.default)(due).valueOf();
    var difference = dueTime - currentTime;
    var currentInfo = colorMap.find(function (_ref) {
      var period = _ref.period;
      var color = _ref.color;
      return difference < period;
    });
    var style = currentInfo ? { color: currentInfo.color } : { color: 'rgba(0, 0, 0, 0.4)' };

    if (due) {
      return _react3.default.createElement(
        'div',
        { className: 'text-ellipsis', style: style },
        'Due ',
        (0, _moment2.default)(due).fromNow()
      );
    } else {
      return null;
    }
  }
}));

var onMount = function onMount(nextProps, prevProps) {
  if (!prevProps || prevProps.item != nextProps.item) {
    //    if(!nextProps.task || !nextProps.task.data){
    nextProps.TasksActions.getTask({
      taskId: nextProps.item
    });
    //    }
  }
};

var Component = exports.Component = _wrapComponent('_component2')(_react3.default.createClass({
  displayName: 'Component',

  // Mounting
  componentWillMount: function componentWillMount() {
    onMount(this.props);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    onMount(nextProps, this.props);
  },
  updateTask: function updateTask() {
    var _this = this;

    setTimeout(function () {
      return _this.props.TasksActions.updateTask({ task: _this.props.task.data });
    }, 1);
  },
  toggleComplete: function toggleComplete(model, value) {
    this.props.TasksActions.toggleComplete({
      taskId: this.props.task.data._id,
      model: model
    });
    this.updateTask();
  },
  showModal: function showModal() {
    this.props.ModalActions.showModal({
      modalType: 'TASK',
      modalProps: {
        taskId: this.props.item
      }
    });
  },
  render: function render() {
    var _props = this.props;
    var task = _props.task;
    var entityModel = _props.entityModel;
    var draggable = _props.draggable;
    var layout = _props.layout;
    var board = _props.board;
    var project = _props.project;

    if (!task || !task.data) {
      return null;
    }
    if (layout == 'list') {
      return _react3.default.createElement(
        'div',
        { className: (0, _classnames2.default)(_defineProperty({}, _TaskListItem2.default.isDragging, task.isDragging && draggable)) },
        _react3.default.createElement(
          'div',
          { className: (0, _classnames2.default)(_TaskListItem2.default.listItem, 'layout-row flex layout-align-start-center') },
          _react3.default.createElement(_Checkbox2.default, {
            title: task.data.complete ? 'Mark as incomplete' : 'Mark as complete',
            model: entityModel + '.data.complete',
            value: task.data.complete,
            changeAction: this.toggleComplete,
            className: 'text-primary',
            circle: true }),
          _react3.default.createElement(
            'div',
            { className: 'flex text-ellipsis', style: { lineHeight: '1.4em' } },
            _react3.default.createElement(_Input2.default, {
              model: entityModel + '.name',
              value: task.data.name,
              onChange: this.updateTask,
              className: 'input-plain',
              type: 'text',
              placeholder: 'Task description'
            })
          ),
          task.data.labels && task.data.labels.length > 0 && board && board.data && board.data.labels ? _react3.default.createElement(_TaskLabelDots2.default, { labels: task.data.labels, labelInfo: board.data.labels, tag: true }) : null,
          _react3.default.createElement(
            'div',
            { className: _TaskListItem2.default.listUser + ' layout-row layout-align-start-center text-ellipsis' },
            _react3.default.createElement(_UserAvatars2.default, { users: task.data.users, limit: 3 })
          ),
          _react3.default.createElement(
            'div',
            { className: _TaskListItem2.default.listDate },
            _react3.default.createElement(DueDate, { due: task.data.due })
          ),
          _react3.default.createElement(
            'div',
            { className: _TaskListItem2.default.listActions + ' text-ellipsis layout-row layout-align-end-center' },
            _react3.default.createElement(
              _SimpleIconButton2.default,
              { onClick: this.showModal, title: 'Show Task' },
              _react3.default.createElement(_openInNew2.default, { size: '20px' })
            )
          )
        )
      );
    } else {
      return _react3.default.createElement(
        'div',
        { className: (0, _classnames2.default)(_TaskListItem2.default.card, 'layout-column flex') },
        _react3.default.createElement(
          'div',
          { className: _TaskListItem2.default.cardBody + ' layout-row' },
          _react3.default.createElement(_Checkbox2.default, {
            title: task.data.complete ? 'Mark as incomplete' : 'Mark as complete',
            model: entityModel + '.data.complete',
            value: task.data.complete,
            changeAction: this.toggleComplete,
            className: 'text-primary',
            circle: true
          }),
          _react3.default.createElement(
            'div',
            { className: _TaskListItem2.default.cardText + ' flex' },
            _react3.default.createElement(_Textarea2.default, {
              onChange: this.updateTask,
              model: entityModel + '.data.name',
              value: task.data.name,
              className: 'input-plain',
              type: 'text',
              placeholder: 'Task description'
            })
          ),
          _react3.default.createElement(_UserAvatars2.default, { users: task.data.users, limit: 2 })
        ),
        _react3.default.createElement(
          'div',
          { className: _TaskListItem2.default.cardFooter + ' layout-row layout-align-start-center' },
          _react3.default.createElement(
            'div',
            { className: 'flex layout-row layout-align-start-center' },
            task.data.labels && task.data.labels.length > 0 && board && board.data && board.data.labels ? _react3.default.createElement(_TaskLabelDots2.default, { labels: task.data.labels, labelInfo: board.data.labels }) : null
          ),
          _react3.default.createElement(
            'div',
            { style: { padding: '0 5px' } },
            _react3.default.createElement(DueDate, { due: task.data.due })
          ),
          _react3.default.createElement(
            _SimpleIconButton2.default,
            { onClick: this.showModal, title: 'Show Task' },
            _react3.default.createElement(_openInNew2.default, { size: '20px' })
          )
        )
      );
    }
  }
}));

///////////////////////////////// CONTAINER /////////////////////////////////

function mapStateToProps(_ref2, _ref3) {
  var tasks = _ref2.tasks;
  var projects = _ref2.projects;
  var item = _ref3.item;

  var task = tasks.data[item];
  var board = (0, _lodash.has)(task, 'data.board') ? tasks.boards[task.data.board] : {};
  var boardModel = (0, _lodash.has)(task, 'data.board') ? 'tasks.boards.' + task.data.board : '';
  var project = (0, _lodash.has)(board, 'data.project') ? projects.data[board.data.project] : {};

  return {
    task: task,
    entityModel: 'tasks.data.' + item,
    board: board,
    boardModel: boardModel,
    project: project
  };
}

function mapDispatchToProps(dispatch) {
  return {
    TasksActions: (0, _redux.bindActionCreators)(TasksActions, dispatch),
    ModalActions: (0, _redux.bindActionCreators)(ModalActions, dispatch)
  };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Component);