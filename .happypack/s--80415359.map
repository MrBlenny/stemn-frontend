{"version":3,"sources":["app\\renderer\\main\\modules\\Files\\PreviewFile\\PreviewFile.utils.js"],"names":[],"mappings":"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","file":"PreviewFile.utils.js","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["import { forEach, clone } from 'lodash';\nimport codemirror from 'codemirror';\nimport 'codemirror/mode/meta.js';\n\nconst getCodeMirrorExts = () => {\n    var codeExts = [];\n    forEach(codemirror.modeInfo, function (mode) {\n        if (mode.ext) {\n            codeExts = codeExts.concat(mode.ext);\n        }\n    });\n    return codeExts\n}\n\nexport const viewerFileTypes = {\n    general       : {\n        gerber   : ['gerber', // Virtual gerber type\n                    'drl', 'drd', 'txt', // This goes first so txt does not display as gerber\n                    'out', 'outline',\n                    'gbl', 'sol',\n                    'gbs', 'sts',\n                    'gbp', 'crs',\n                    'gbo', 'pls',\n                    'gtl', 'cmp',\n                    'gts', 'stc',\n                    'gtp', 'crc',\n                    'gto', 'plc'],\n        pcb       : ['brd', 'pcb', 'kicad_pcb'],\n        code      : getCodeMirrorExts(),\n        autodesk  : ['3dm','3ds','asm','cam360', 'catpart','cgr','collaboration','dae','dgn','dlv3','dwf','dwfx','dwg','dwt','dxf','exp',\n                     'f3d','fbx','g','gbxml','iam','idw','ifc','ige','iges','igs','ipt','jt','model','neu','nwc','nwd','obj','pdf','prt','rcp','rvt',\n                     'sab','sat','session','skp','sldprt','smb','smt','ste','step','stl','stla','stlb','stp','wire','x_b','x_t','xas','xpr'],\n                    // Assem - 'sldasm' 'catproduct'\n        google    : ['webm', 'mpeg4', '3gpp', 'mov', 'avi', 'mpegps', 'wmv', 'flv', //https://gist.github.com/izazueta/4961650\n                    'xls', 'xlsx',\n                    'pages',\n                    'psd', 'tiff',\n                    'eps', 'ps', 'ai',\n                    'ttf', 'xps',\n                   ],\n        image    : ['png', 'jpg', 'jpeg', 'gif', 'svg', 'bmp', 'ico'],\n        pdf      : ['pdf',\n                   ],\n//            pcb      : ['brd', 'pcb', 'kicad_pcb'],\n    },\n    dropbox      : {\n        pdf      : ['docx', 'doc', 'docm',\n                    'ppt', 'pps', 'ppsx', 'ppsm', 'pptx', 'pptm',\n                    'rtf']\n    },\n    drive        : {\n        google   : ['docx', 'doc', 'docm',\n                    'ppt', 'pps', 'ppsx', 'ppsm', 'pptx', 'pptm',\n                    'rtf'],\n        gdoc     : ['gdoc', 'gsheet', 'gslides']\n    }\n}\n\nexport const getViewerType = (fileType, provider) => {\n    var result;\n    var fileTypeLower = fileType ? fileType.toLowerCase() : '';\n    provider = provider == 'drive' ? 'drive' : 'dropbox';\n\n    // Extend the fileTypes array by the provider specific info\n    var viewerFileTypesProvider = clone(viewerFileTypes.general);\n    Object.keys(viewerFileTypes[provider]).forEach( key => {\n      viewerFileTypesProvider[key] = viewerFileTypesProvider[key] || [];\n      viewerFileTypesProvider[key] = viewerFileTypesProvider[key].concat(viewerFileTypes[key]);\n    })\n\n    Object.keys(viewerFileTypesProvider).forEach(viewerType => {\n      if (viewerFileTypesProvider[viewerType].indexOf(fileTypeLower) != -1) {\n        result = viewerType;\n      }\n    })\n    return fileTypeLower ? (result || 'other') : 'code'; // If there is no esxtension, it is code.\n}\n"]}