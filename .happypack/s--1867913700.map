{"version":3,"sources":["app\\renderer\\main\\modules\\Mentions\\MentionsInput\\SuggestionsOverlay.js"],"names":[],"mappings":"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","file":"SuggestionsOverlay.js","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport { defaultStyle } from 'substyle';\n\nimport utils from './utils';\n\nimport Suggestion from './Suggestion';\nimport LoadingIndicator from './LoadingIndicator';\n\nclass SuggestionsOverlay extends Component {\n\n  static propTypes = {\n    suggestions: PropTypes.object.isRequired,\n    focusIndex: PropTypes.number,\n    scrollFocusedIntoView: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    onSelect: PropTypes.func,\n  };\n\n  static defaultProps = {\n    suggestions: {},\n    onSelect: () => null,\n  };\n\n  componentDidUpdate() {\n    const { suggestions } = this.refs\n    if (!suggestions || suggestions.offsetHeight >= suggestions.scrollHeight || !this.props.scrollFocusedIntoView) {\n      return\n    }\n\n    const scrollTop = suggestions.scrollTop\n    let { top, bottom } = suggestions.children[this.props.focusIndex].getBoundingClientRect();\n    const { top: topContainer } = suggestions.getBoundingClientRect();\n    top = top - topContainer + scrollTop;\n    bottom = bottom - topContainer + scrollTop;\n\n    if(top < scrollTop) {\n      suggestions.scrollTop = top\n    } else if(bottom > suggestions.offsetHeight) {\n      suggestions.scrollTop = bottom - suggestions.offsetHeight\n    }\n  }\n\n  render() {\n    // do not show suggestions until there is some data\n    if(utils.countSuggestions(this.props.suggestions) === 0 && !this.props.isLoading) {\n      return null;\n    }\n\n    return (\n      <div\n        {...substyle(this.props)}\n        onMouseDown={this.props.onMouseDown}>\n\n        <ul ref=\"suggestions\"\n          {...substyle(this.props, \"list\") }>\n          { this.renderSuggestions() }\n        </ul>\n\n        { this.renderLoadingIndicator() }\n      </div>\n    );\n  }\n\n  renderSuggestions() {\n    return utils.getSuggestions(this.props.suggestions).reduce((result, { suggestions, descriptor }) => [\n      ...result,\n\n      ...suggestions.map((suggestion, index) => this.renderSuggestion(\n        suggestion,\n        descriptor,\n        result.length + index\n      ))\n    ], []);\n  }\n\n  renderSuggestion(suggestion, descriptor, index) {\n    let id = this.getID(suggestion);\n    let isFocused = (index === this.props.focusIndex);\n\n    let { mentionDescriptor, query } = descriptor;\n\n    return (\n      <Suggestion { ...substyle(this.props, \"item\") }\n        key={ id }\n        id={ id }\n        ref={isFocused ? \"focused\" : null}\n        query={ query }\n        index={ index }\n        descriptor={ mentionDescriptor }\n        suggestion={ suggestion }\n        focused={ isFocused }\n        onClick={ () => this.select(suggestion, descriptor) }\n        onMouseEnter={ () => this.handleMouseEnter(index) } />\n    );\n  }\n\n  getID(suggestion) {\n    if(suggestion instanceof String) {\n      return suggestion;\n    }\n\n    return suggestion.id;\n  }\n\n  renderLoadingIndicator () {\n    if(!this.props.isLoading) {\n      return;\n    }\n\n    return <LoadingIndicator { ...substyle(this.props, \"loadingIndicator\") } />\n  }\n\n  handleMouseEnter(index, ev) {\n    if(this.props.onMouseEnter) {\n      this.props.onMouseEnter(index);\n    }\n  }\n\n  select(suggestion, descriptor) {\n    this.props.onSelect(suggestion, descriptor);\n  }\n\n};\n\nexport default SuggestionsOverlay;\n\nconst substyle = defaultStyle({\n  position: \"absolute\",\n  zIndex: 1,\n  backgroundColor: \"white\",\n  marginTop: 14,\n  minWidth: 100,\n\n  list: {\n    margin: 0,\n    padding: 0,\n    listStyleType: \"none\",\n  }\n});\n"]}