{"version":3,"sources":["app\\renderer\\main\\modules\\Tasks\\TaskList\\TaskListItem\\TaskListItem.jsx"],"names":[],"mappings":"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","file":"TaskListItem.jsx","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["// Container Core\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\n// Container Actions\nimport * as TasksActions from '../../Tasks.actions.js';\nimport * as ModalActions from 'app/renderer/main/modules/Modal/Modal.actions.js';\n\n// Component Core\nimport React from 'react';\nimport moment from 'moment';\nimport { has } from 'lodash';\n\n// Styles\nimport classNames from 'classnames';\nimport classes from './TaskListItem.css';\n\n// Sub Components\nimport Checkbox from 'app/renderer/main/components/Input/Checkbox/Checkbox';\nimport Input from 'app/renderer/main/components/Input/Input/Input';\nimport UserAvatars from 'app/renderer/main/components/Avatar/UserAvatars/UserAvatars.jsx'\nimport SimpleIconButton from 'app/renderer/main/components/Buttons/SimpleIconButton/SimpleIconButton'\nimport MdOpenInNew from 'react-icons/md/open-in-new';\nimport PopoverMenu from 'app/renderer/main/components/PopoverMenu/PopoverMenu';\nimport TaskLabelDots from 'app/renderer/main/modules/Tasks/TaskLabelDots/TaskLabelDots.jsx'\nimport Textarea from 'app/renderer/main/components/Input/Textarea/Textarea';\nimport UserSelect from 'app/renderer/main/components/Users/UserSelect/UserSelect.jsx';\n\n\n///////////////////////////////// COMPONENT /////////////////////////////////\n\nexport const DueDate = React.createClass({\n  render() {\n    const { due } = this.props;\n\n    const day = 1000 * 60 * 60 * 24;\n    const colorMap = [\n      {\n        period: 1 * day,\n        color : 'red'\n      },{\n        period: 3 * day,\n        color : 'orange'\n      }\n    ]\n    const currentTime = moment().valueOf();\n    const dueTime     = moment(due).valueOf();\n    const difference  = dueTime - currentTime;\n    const currentInfo = colorMap.find(({period, color}) => difference < period);\n    const style       = currentInfo ? { color : currentInfo.color } : {color : 'rgba(0, 0, 0, 0.4)' };\n\n    if(due){\n      return (\n        <div className=\"text-ellipsis\" style={style}>Due {moment(due).fromNow()}</div>\n      )\n    }\n    else {\n      return null\n    }\n  }\n});\n\nconst onMount = (nextProps, prevProps) => {\n  if(!prevProps || prevProps.item != nextProps.item){\n//    if(!nextProps.task || !nextProps.task.data){\n      nextProps.TasksActions.getTask({\n        taskId: nextProps.item\n      })\n//    }\n  }\n}\n\nexport const Component = React.createClass({\n  // Mounting\n  componentWillMount() { onMount(this.props) },\n  componentWillReceiveProps(nextProps) { onMount(nextProps, this.props)},\n\n  updateTask(){\n    setTimeout(()=>this.props.TasksActions.updateTask({task: this.props.task.data}), 1);\n  },\n  toggleComplete(model, value){\n    this.props.TasksActions.toggleComplete({\n      taskId: this.props.task.data._id,\n      model\n    })\n    this.updateTask();\n  },\n  showModal(){\n    this.props.ModalActions.showModal({\n      modalType: 'TASK',\n      modalProps: {\n        taskId: this.props.item\n      }\n    })\n  },\n  render() {\n    const { task, entityModel, draggable, layout, board, project } = this.props;\n    if(!task || !task.data){\n      return null\n    }\n    if(layout == 'list'){\n      return (\n        <div className={classNames({[classes.isDragging]: task.isDragging && draggable})}>\n          <div className={classNames(classes.listItem, 'layout-row flex layout-align-start-center')}>\n            <Checkbox\n              title={task.data.complete ? 'Mark as incomplete' : 'Mark as complete'}\n              model={`${entityModel}.data.complete`}\n              value={task.data.complete}\n              changeAction={this.toggleComplete}\n              className=\"text-primary\"\n              circle={true} />\n            <div className=\"flex text-ellipsis\" style={{lineHeight: '1.4em'}}>\n              <Input\n                model={`${entityModel}.name`}\n                value={task.data.name}\n                onChange={this.updateTask}\n                className=\"input-plain\"\n                type=\"text\"\n                placeholder=\"Task description\" \n              />\n            </div>\n            { task.data.labels && task.data.labels.length > 0 && board && board.data && board.data.labels ?\n              <TaskLabelDots labels={task.data.labels} labelInfo={board.data.labels} tag={true} />\n              : null\n            }\n            <div className={classes.listUser + ' layout-row layout-align-start-center text-ellipsis'}>\n              <UserAvatars users={task.data.users} limit={3}/>\n            </div>\n            <div className={classes.listDate}>\n              <DueDate due={task.data.due}/>\n            </div>\n            <div className={classes.listActions + ' text-ellipsis layout-row layout-align-end-center'}>\n              <SimpleIconButton onClick={this.showModal} title=\"Show Task\">\n                <MdOpenInNew size=\"20px\"/>\n              </SimpleIconButton>\n            </div>\n          </div>\n        </div>\n      )\n    }\n    else{\n      return (\n        <div className={classNames(classes.card, 'layout-column flex')}>\n          <div className={classes.cardBody + ' layout-row'}>\n            <Checkbox\n              title={task.data.complete ? 'Mark as incomplete' : 'Mark as complete'}\n              model={`${entityModel}.data.complete`}\n              value={task.data.complete}\n              changeAction={this.toggleComplete}\n              className=\"text-primary\"\n              circle={true}\n            />\n            <div className={classes.cardText + ' flex'}>\n              <Textarea\n                onChange={this.updateTask}\n                model={`${entityModel}.data.name`}\n                value={task.data.name}\n                className=\"input-plain\"\n                type=\"text\"\n                placeholder=\"Task description\"\n              />\n            </div>\n            <UserAvatars users={task.data.users} limit={2}/>\n          </div>\n            <div className={classes.cardFooter + ' layout-row layout-align-start-center'}>\n              <div className=\"flex layout-row layout-align-start-center\">\n                { task.data.labels && task.data.labels.length > 0 && board && board.data && board.data.labels ?\n                <TaskLabelDots labels={task.data.labels} labelInfo={board.data.labels} />\n                  : null\n                }\n              </div>\n              <div style={{padding: '0 5px'}}><DueDate due={task.data.due}/></div>\n              <SimpleIconButton onClick={this.showModal} title=\"Show Task\">\n                <MdOpenInNew size=\"20px\"/>\n              </SimpleIconButton>\n            </div>\n        </div>\n      );\n    }\n  }\n});\n\n\n\n\n///////////////////////////////// CONTAINER /////////////////////////////////\n\nfunction mapStateToProps({ tasks, projects }, {item}) {\n  const task          = tasks.data[item];\n  const board         = has(task, 'data.board') ? tasks.boards[task.data.board] : {};\n  const boardModel    = has(task, 'data.board') ? `tasks.boards.${task.data.board}` : '';\n  const project       = has(board, 'data.project') ? projects.data[board.data.project] : {};\n\n  return {\n    task,\n    entityModel: `tasks.data.${item}`,\n    board,\n    boardModel,\n    project\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    TasksActions: bindActionCreators(TasksActions, dispatch),\n    ModalActions : bindActionCreators(ModalActions, dispatch),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Component);\n"]}