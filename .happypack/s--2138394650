'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = undefined;

var _index = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\redbox-react\\lib\\index.js');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-catch-errors\\lib\\index.js');

var _index4 = _interopRequireDefault(_index3);

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index5 = require('C:\\Users\\david\\repositories\\stemn-electron-2\\node_modules\\react-transform-hmr\\lib\\index.js');

var _index6 = _interopRequireDefault(_index5);

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _ChangesActions = require('app/renderer/main/modules/Changes/Changes.actions.js');

var ChangesActions = _interopRequireWildcard(_ChangesActions);

var _icepick = require('icepick');

var _icepick2 = _interopRequireDefault(_icepick);

var _lodash = require('lodash');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactRouter = require('react-router');

var _ContentSidebar = require('app/renderer/main/components/ContentSidebar');

var _ContentSidebar2 = _interopRequireDefault(_ContentSidebar);

var _LoadingOverlay = require('app/renderer/main/components/Loading/LoadingOverlay/LoadingOverlay.jsx');

var _LoadingOverlay2 = _interopRequireDefault(_LoadingOverlay);

var _Timeline = require('app/renderer/main/modules/Timeline/Timeline.jsx');

var _Timeline2 = _interopRequireDefault(_Timeline);

var _CommitChanges = require('app/renderer/main/modules/Changes/CommitChanges/CommitChanges.jsx');

var _CommitChanges2 = _interopRequireDefault(_CommitChanges);

var _CommitBox = require('app/renderer/main/modules/Changes/CommitBox/CommitBox.jsx');

var _CommitBox2 = _interopRequireDefault(_CommitBox);

var _FileCompareStandard = require('app/renderer/main/modules/FileCompare/FileCompareStandard/FileCompareStandard.jsx');

var _FileCompareStandard2 = _interopRequireDefault(_FileCompareStandard);

var _cloudLocked = require('app/renderer/assets/images/pure-vectors/cloud-locked.svg');

var _cloudLocked2 = _interopRequireDefault(_cloudLocked);

var _file = require('app/renderer/assets/images/pure-vectors/file.svg');

var _file2 = _interopRequireDefault(_file);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2 = (0, _index6.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/pages/ProjectChangesPage/ProjectChangesPage.jsx',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

var _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2 = (0, _index4.default)({
  filename: 'C:/Users/david/repositories/stemn-electron-2/app/renderer/main/pages/ProjectChangesPage/ProjectChangesPage.jsx',
  components: _components,
  locals: [],
  imports: [_react3.default, _index2.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformHmrLibIndexJs2(_CUsersDavidRepositoriesStemnElectron2Node_modulesReactTransformCatchErrorsLibIndexJs2(Component, id), id);
  };
} // Container Core


// Container Actions


// Component Core


// Styles


// Sub Components


///////////////////////////////// COMPONENT /////////////////////////////////

var CommitBoxStyles = {
  borderTop: '1px solid rgba(0, 0, 0, 0.1)',
  background: 'rgba(0, 0, 0, 0.03)'
};

var Component = exports.Component = _wrapComponent('_component')(_react3.default.createClass({
  displayName: 'Component',

  propTypes: {
    project: _react3.default.PropTypes.object.isRequired
  },

  componentWillMount: function componentWillMount() {
    if (this.props.project && this.props.project.data && this.props.project.data.remote.connected) {
      this.props.changesActions.fetchChanges({
        projectId: this.props.project.data._id
      });
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this.props.project && nextProps.project && this.props.project.data && nextProps.project.data._id !== this.props.project.data._id && nextProps.project.data.remote.connected) {
      this.props.changesActions.fetchChanges({
        projectId: nextProps.project.data._id
      });
    }
  },
  refresh: function refresh() {
    this.props.changesActions.fetchChanges({
      projectId: this.props.project.data._id
    });
  },
  toggleAll: function toggleAll(value) {
    return this.props.changesActions.toggleAll({
      value: value,
      projectId: this.props.project.data._id
    });
  },
  commitFn: function commitFn() {
    this.props.changesActions.commit({
      projectId: this.props.project.data._id,
      summary: this.props.changes.summary,
      description: this.props.changes.description
    });
  },
  deselect: function deselect() {
    this.props.changesActions.deselect({
      projectId: this.props.project.data._id
    });
  },
  render: function render() {
    var _this = this;

    var _props = this.props;
    var changes = _props.changes;
    var project = _props.project;
    var changesActions = _props.changesActions;
    var entityModel = _props.entityModel;
    var dispatch = _props.dispatch;


    if (!project || !project.data) {
      return _react3.default.createElement(_LoadingOverlay2.default, null);
    }

    var baseLink = 'project/' + project.data._id;

    if (project.data.remote.connected) {
      if (!changes) {
        return _react3.default.createElement(_LoadingOverlay2.default, null);
      }
      var filePrevious = (0, _lodash.has)(changes, 'selected.data.previousRevisionId') ? _icepick2.default.assocIn(changes.selected.data, ['revisionId'], changes.selected.data.previousRevisionId) : null;

      return _react3.default.createElement(
        'div',
        { className: 'layout-column flex rel-box' },
        _react3.default.createElement(
          'div',
          { className: 'layout-row flex' },
          _react3.default.createElement(
            'div',
            { className: 'layout-column' },
            _react3.default.createElement(
              _ContentSidebar2.default,
              null,
              changes && changes.data ? _react3.default.createElement(_CommitChanges2.default, {
                changes: changes,
                project: project.data,
                toggleAll: this.toggleAll,
                selectedFileChange: changesActions.selectedFileChange,
                refresh: this.refresh,
                deselect: this.deselect,
                dispatch: dispatch
              }) : '',
              _react3.default.createElement(
                'div',
                { style: CommitBoxStyles },
                _react3.default.createElement(_CommitBox2.default, {
                  entityModel: entityModel,
                  changes: changes,
                  changesActions: changesActions,
                  commitFn: function commitFn() {
                    return _this.commitFn();
                  },
                  project: project.data
                })
              )
            )
          ),
          _react3.default.createElement(
            'div',
            { className: 'layout-column flex' },
            changes.selected && changes.selected.data ? _react3.default.createElement(_FileCompareStandard2.default, {
              compareId: 'changes-' + project.data._id + '-' + changes.selected._id,
              project: project.data,
              file1: changes.selected.data,
              file2: filePrevious }) : _react3.default.createElement(
              'div',
              { className: 'layout-column layout-align-center-center flex text-title-4 text-center' },
              _react3.default.createElement('img', { src: _file2.default, style: { width: '100px' } }),
              _react3.default.createElement(
                'div',
                null,
                'No file change selected.'
              )
            )
          )
        )
      );
    } else {
      return _react3.default.createElement(
        'div',
        { className: 'layout-column layout-align-center-center flex' },
        _react3.default.createElement('img', { src: _cloudLocked2.default }),
        _react3.default.createElement(
          'div',
          { className: 'text-title-4 text-center' },
          'Changes not available. Connect this project to Drive or Dropbox'
        ),
        _react3.default.createElement(
          'div',
          { className: 'text-title-4 text-center link-primary', style: { marginTop: '10px' } },
          _react3.default.createElement(
            _reactRouter.Link,
            { to: baseLink + '/settings' },
            'Add File Store'
          )
        )
      );
    }
  }
}));

///////////////////////////////// CONTAINER /////////////////////////////////

function mapStateToProps(_ref, _ref2) {
  var changes = _ref.changes;
  var projects = _ref.projects;
  var params = _ref2.params;

  var project = projects.data[params.stub];
  return {
    project: project,
    changes: changes[params.stub],
    entityModel: 'changes.' + params.stub
  };
}

function mapDispatchToProps(dispatch) {
  return {
    changesActions: (0, _redux.bindActionCreators)(ChangesActions, dispatch),
    dispatch: dispatch
  };
}

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Component);