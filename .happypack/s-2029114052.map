{"version":3,"sources":["app\\renderer\\main\\modules\\Tasks\\TaskList\\TaskListItem\\TaskListItem.drag.config.js"],"names":[],"mappings":"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","file":"TaskListItem.drag.config.js","sourceRoot":"C:/Users/david/repositories/stemn-electron-2","sourcesContent":["import { findDOMNode } from 'react-dom';\nimport { throttle } from 'lodash';\n\nlet throttleModelUpdate = throttle((throttledFn)=>throttledFn(), 100, {\n  leading:true,\n  trailing:false\n});\n\nlet endDragProps = {};\nlet beginDragProps = {};\n\nexport const cardHover = (props, monitor, component) => {\n  const dragIndex = monitor.getItem().index;\n  const dragId = monitor.getItem().id;\n\n  const hoverIndex = props.index;\n  const hoverId = props.id;\n\n  // Don't replace items with themselves\n  if (dragId === hoverId) {\n    return;\n  }\n\n  // Determine rectangle on screen\n  const hoverBoundingRect = findDOMNode(component).getBoundingClientRect();\n\n  // Get vertical middle\n  const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n  // Determine mouse position\n  const clientOffset = monitor.getClientOffset();\n\n  // Get pixels to the top\n  const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n\n  // Only perform the move when the mouse has crossed half of the items height\n  // When dragging downwards, only move when the cursor is below 50%\n  // When dragging upwards, only move when the cursor is above 50%\n\n  // Dragging downwards\n  if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n    return;\n  }\n\n  // Dragging upwards\n  if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n    return;\n  }\n\n  // Time to actually perform the action\n   throttleModelUpdate(()=>{\n\n     endDragProps.id = props.id;\n     endDragProps.index = props.index;\n     endDragProps.groupId = props.groupId;\n     // If the dragged item index is less than the destination index, we set it to after\n     const dragIndexInGroup = props.tasks.findIndex(taskId => taskId == beginDragProps.id);\n     endDragProps.after = dragIndexInGroup != -1 ? dragIndexInGroup < endDragProps.index : false;\n\n     props.moveCard({\n       task: dragId,\n       destinationTask: hoverId,\n       destinationGroup: props.groupId,\n     });\n  })\n\n  // Note: we're mutating the monitor item here!\n  // Generally it's better to avoid mutations,\n  // but it's good here for the sake of performance\n  // to avoid expensive index searches.\n   monitor.getItem().index = hoverIndex;\n}\n\nexport const cardDrop = (props, monitor, component) => {}\n\nexport const beginDrag = (props, monitor, component) => {\n  props.beginDrag(props.id);\n\n  beginDragProps.id = props.id;\n  beginDragProps.index = props.index;\n  beginDragProps.groupId = props.groupId;\n\n  endDragProps = {};\n  return {\n    id: props.id,\n    groupId: props.groupId,\n    index: props.index,\n    tasks: props.tasks\n  }\n}\n\nexport const endDrag = (props, monitor) => {\n  if(endDragProps.groupId && (beginDragProps.groupId != endDragProps.groupId || beginDragProps.index != endDragProps.index)){\n    // We have done a real move, save\n    props.moveCard({\n      task: beginDragProps.id,\n      destinationTask: endDragProps.id,\n      destinationGroup: endDragProps.groupId,\n      after: endDragProps.after,\n      save: true,\n    });\n  }\n  props.endDrag(beginDragProps.id);\n}\n\nexport const emptyHover = (props, monitor) => {\n  throttleModelUpdate(()=>{\n\n    endDragProps.id = undefined;\n    endDragProps.index = 0;\n    endDragProps.groupId = props.groupId;\n\n    props.moveCard({\n      task: monitor.getItem().id,\n      destinationGroup: props.groupId,\n    })\n  })\n}\n"]}